"""
–°–µ—Ä–≤–µ—Ä–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞ –¥–æ–¥–∞—Ç–∫—É –¥–ª—è –æ–±–º—ñ–Ω—É –∫–Ω–∏–≥–∞–º–∏.
–†–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –Ω–∞ Flask –∑ MySQL –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö.
"""

from flask import Flask, request, jsonify, send_from_directory
import mysql.connector
from mysql.connector import Error
from werkzeug.utils import secure_filename
import os
import uuid
from werkzeug.security import generate_password_hash, check_password_hash

app = Flask(__name__)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
UPLOAD_FOLDER = os.path.join('static', 'uploads')
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg'}
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–∞–ª–æ–≥—É –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å, —è–∫—â–æ –π–æ–≥–æ –Ω–µ —ñ—Å–Ω—É—î
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
db_config = {
    'host': 'localhost',
    'user': 'root',
    'password': 'SQL1610@slava',
    'database': 'book_exchange'
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö —Ä–æ–∑—à–∏—Ä–µ–Ω—å —Ñ–∞–π–ª—ñ–≤
def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def create_database():
    connection = None
    try:
        connection = mysql.connector.connect(
            host=db_config['host'],
            user=db_config['user'],
            password=db_config['password']
        )
        if connection.is_connected():
            cursor = connection.cursor()
            cursor.execute(f"CREATE DATABASE IF NOT EXISTS {db_config['database']}")
            print(f"–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö {db_config['database']} —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞ –∞–±–æ –≤–∂–µ —ñ—Å–Ω—É—î")
            cursor.close()
    except Error as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
    finally:
        if connection and connection.is_connected():
            connection.close()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def create_connection():
    connection = None
    try:
        connection = mysql.connector.connect(**db_config)
        if connection.is_connected():
            print("–ó'—î–¥–Ω–∞–Ω–Ω—è –∑ MySQL —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Error as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—ñ –¥–æ MySQL: {e}")
    return connection

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø—É—Å–∫—É
def setup_database():
    create_database()

    conn = create_connection()
    if conn is None:
        print("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")
        return

    cursor = conn.cursor()

    # –¢–∞–±–ª–∏—Ü—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INT AUTO_INCREMENT PRIMARY KEY,
        username VARCHAR(100) UNIQUE NOT NULL,
        email VARCHAR(100) UNIQUE NOT NULL,
        password VARCHAR(255) NOT NULL,
        full_name VARCHAR(200),
        phone_number VARCHAR(20),
        region VARCHAR(100),
        avatar_symbol VARCHAR(10), 
        rating FLOAT DEFAULT 0,
        rating_count INT DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')

    # –¢–∞–±–ª–∏—Ü—è –∂–∞–Ω—Ä—ñ–≤ –∫–Ω–∏–≥
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS genres (
        id INT AUTO_INCREMENT PRIMARY KEY,
        name VARCHAR(100) UNIQUE NOT NULL
    )
    ''')

    # –¢–∞–±–ª–∏—Ü—è –∫–Ω–∏–≥
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS books (
        id INT AUTO_INCREMENT PRIMARY KEY,
        title VARCHAR(200) NOT NULL,
        author VARCHAR(100) NOT NULL,
        description TEXT,
        genre_id INT,
        cover_url VARCHAR(255),
        owner_id INT NOT NULL,
        is_free BOOLEAN DEFAULT FALSE,
        status ENUM('–¥–æ—Å—Ç—É–ø–Ω–∞', '–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞', '–∑–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω–∞') DEFAULT '–¥–æ—Å—Ç—É–ø–Ω–∞',
        rating FLOAT DEFAULT 0,
        rating_count INT DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (owner_id) REFERENCES users(id),
        FOREIGN KEY (genre_id) REFERENCES genres(id)
    )
    ''')

    # –¢–∞–±–ª–∏—Ü—è –æ–±–º—ñ–Ω—ñ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS exchanges (
        id INT AUTO_INCREMENT PRIMARY KEY,
        book_id INT NOT NULL,
        borrower_id INT NOT NULL,
        status ENUM('–∑–∞–ø–∏—Ç', '–ø—Ä–∏–π–Ω—è—Ç–æ', '–≤—ñ–¥—Ö–∏–ª–µ–Ω–æ', '–æ—Ç—Ä–∏–º–∞–Ω–æ') DEFAULT '–∑–∞–ø–∏—Ç',
        start_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        end_date TIMESTAMP NULL,
        FOREIGN KEY (book_id) REFERENCES books(id),
        FOREIGN KEY (borrower_id) REFERENCES users(id)
    )
    ''')

    # –¢–∞–±–ª–∏—Ü—è —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–∏—Ö –∫–Ω–∏–≥
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS wishlist (
        id INT AUTO_INCREMENT PRIMARY KEY,
        user_id INT NOT NULL,
        title VARCHAR(200) NOT NULL,
        author VARCHAR(100),
        genre_id INT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users(id),
        FOREIGN KEY (genre_id) REFERENCES genres(id)
    )
    ''')

    # –¢–∞–±–ª–∏—Ü—è –¥–ª—è –≤—ñ–¥–≥—É–∫—ñ–≤ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_reviews (
        id INT AUTO_INCREMENT PRIMARY KEY,
        reviewer_id INT NOT NULL,
        user_id INT NOT NULL,
        rating INT NOT NULL CHECK (rating BETWEEN 1 AND 5),
        comment TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (reviewer_id) REFERENCES users(id),
        FOREIGN KEY (user_id) REFERENCES users(id)
    )
    ''')

    # –¢–∞–±–ª–∏—Ü—è –¥–ª—è –≤—ñ–¥–≥—É–∫—ñ–≤ –ø—Ä–æ –∫–Ω–∏–≥–∏
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS book_reviews (
        id INT AUTO_INCREMENT PRIMARY KEY,
        user_id INT NOT NULL,
        book_id INT NOT NULL,
        rating INT NOT NULL CHECK (rating BETWEEN 1 AND 5),
        comment TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users(id),
        FOREIGN KEY (book_id) REFERENCES books(id)
    )
    ''')

    # –¢–∞–±–ª–∏—Ü—è –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —á–∞—Ç—É
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS messages (
        id INT AUTO_INCREMENT PRIMARY KEY,
        sender_id INT NOT NULL,
        receiver_id INT NOT NULL,
        content TEXT NOT NULL,
        is_read BOOLEAN DEFAULT FALSE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (sender_id) REFERENCES users(id),
        FOREIGN KEY (receiver_id) REFERENCES users(id)
    )
    ''')

    # –¢–∞–±–ª–∏—Ü—è –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS notifications (
            id INT AUTO_INCREMENT PRIMARY KEY,
            user_id INT NOT NULL,
            content TEXT NOT NULL,
            type VARCHAR(50) NOT NULL,
            related_id INT,
            is_read BOOLEAN DEFAULT FALSE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users(id)
        )
        ''')

    # –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –∂–∞–Ω—Ä—ñ–≤
    genres = [
        "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "–§–µ–Ω—Ç–µ–∑—ñ", "–î–µ—Ç–µ–∫—Ç–∏–≤", "–†–æ–º–∞–Ω—Ç–∏–∫–∞", "–†–æ–º–∞–Ω",
        "–ù–∞—É–∫–æ–≤–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–ë—ñ–æ–≥—Ä–∞—Ñ—ñ—è", "–ü—Ä–∏–≥–æ–¥–∏", "–ñ–∞—Ö–∏", "–ö–æ–º—ñ–∫—Å–∏",
        "–ü–æ–µ–∑—ñ—è", "–î—Ä–∞–º–∞", "–î–∏—Ç—è—á–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–ü—Å–∏—Ö–æ–ª–æ–≥—ñ—è", "–ë—ñ–∑–Ω–µ—Å",
        "–§—ñ–ª–æ—Å–æ—Ñ—ñ—è", "–ú–∏—Å—Ç–µ—Ü—Ç–≤–æ", "–ö—É–ª—ñ–Ω–∞—Ä—ñ—è", "–ü–æ–¥–æ—Ä–æ–∂—ñ", "–°–∞–º–æ—Ä–æ–∑–≤–∏—Ç–æ–∫", "–†–µ–ª—ñ–≥—ñ—è", "–°–ø–æ—Ä—Ç"
    ]

    for genre in genres:
        try:
            cursor.execute("INSERT INTO genres (name) VALUES (%s)", (genre,))
        except:
            pass

    conn.commit()
    cursor.close()
    conn.close()
    print("–°—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–æ")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
setup_database()

# –ú–∞—Ä—à—Ä—É—Ç–∏ API

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@app.route('/api/users', methods=['POST'])
def register_user():
    data = request.form if request.form else request.get_json()
    username = data.get('username')
    email = data.get('email')
    password = data.get('password')
    full_name = data.get('full_name')
    phone_number = data.get('phone_number')
    region = data.get('region')
    avatar_symbol = data.get('avatar_symbol', 'üë§')

    if not all([username, email, password]):
        return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–í—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ"}), 400

    # –•–µ—à—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è
    hashed_password = generate_password_hash(password)

    conn = create_connection()
    cursor = conn.cursor()

    try:
        cursor.execute(
            """INSERT INTO users 
               (username, email, password, full_name, phone_number, region, avatar_symbol) 
               VALUES (%s, %s, %s, %s, %s, %s, %s)""",
            (username, email, hashed_password, full_name, phone_number, region, avatar_symbol)
        )
        conn.commit()
        user_id = cursor.lastrowid
        return jsonify({"status": "—É—Å–ø—ñ—Ö", "id": user_id}), 201
    except Error as e:
        return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": str(e)}), 400
    finally:
        cursor.close()
        conn.close()

# –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@app.route('/api/users/<int:user_id>', methods=['PUT'])
def update_user(user_id):
    data = request.form if request.form else request.get_json()
    full_name = data.get('full_name')
    phone_number = data.get('phone_number')
    region = data.get('region')
    avatar_symbol = data.get('avatar_symbol')

    conn = create_connection()
    cursor = conn.cursor()

    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        cursor.execute("SELECT id FROM users WHERE id = %s", (user_id,))
        if not cursor.fetchone():
            return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}), 404

        # –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –∑ —Å–∏–º–≤–æ–ª–æ–º –∞–≤–∞—Ç–∞—Ä–∫–∏
        if avatar_symbol:
            cursor.execute(
                """UPDATE users 
                   SET full_name = %s, phone_number = %s, region = %s, avatar_symbol = %s
                   WHERE id = %s""",
                (full_name, phone_number, region, avatar_symbol, user_id)
            )
        else:
            cursor.execute(
                """UPDATE users 
                   SET full_name = %s, phone_number = %s, region = %s
                   WHERE id = %s""",
                (full_name, phone_number, region, user_id)
            )
        conn.commit()

        return jsonify({"status": "—É—Å–ø—ñ—Ö"}), 200
    except Error as e:
        return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": str(e)}), 400
    finally:
        cursor.close()
        conn.close()

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@app.route('/api/users/<int:user_id>', methods=['GET'])
def get_user(user_id):
    conn = create_connection()
    cursor = conn.cursor(dictionary=True)

    try:
        cursor.execute("""
            SELECT id, username, email, full_name, phone_number, region, 
                   avatar_symbol, rating, rating_count, created_at 
            FROM users WHERE id = %s
        """, (user_id,))
        user = cursor.fetchone()

        if user:
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—ñ–≤ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            cursor.execute("""
                SELECT ur.*, u.username
                FROM user_reviews ur 
                JOIN users u ON ur.reviewer_id = u.id 
                WHERE ur.user_id = %s 
                ORDER BY ur.created_at DESC
            """, (user_id,))
            reviews = cursor.fetchall()

            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–Ω–∏–≥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            cursor.execute("""
                SELECT COUNT(*) as total_books 
                FROM books 
                WHERE owner_id = %s
            """, (user_id,))
            books_count = cursor.fetchone()

            user['–≤—ñ–¥–≥—É–∫–∏'] = reviews
            user['–∫—ñ–ª—å–∫—ñ—Å—Ç—å_–∫–Ω–∏–≥'] = books_count['total_books']

            return jsonify({"status": "—É—Å–ø—ñ—Ö", "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á": user}), 200
        else:
            return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}), 404
    except Error as e:
        return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": str(e)}), 400
    finally:
        cursor.close()
        conn.close()

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@app.route('/api/login', methods=['POST'])
def login():
    data = request.get_json()
    email = data.get('email')
    password = data.get('password')

    if not all([email, password]):
        return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–ï–ª–µ–∫—Ç—Ä–æ–Ω–∞ –ø–æ—à—Ç–∞ —ñ –ø–∞—Ä–æ–ª—å –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ"}), 400

    conn = create_connection()
    cursor = conn.cursor(dictionary=True)

    try:
        cursor.execute("""
            SELECT id, username, password, email, full_name, phone_number, region, 
                   avatar_symbol, rating, rating_count, created_at 
            FROM users WHERE email = %s
            """,(email,))
        user = cursor.fetchone()

        if not user:
            return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–ù–µ–≤—ñ—Ä–Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω–∞ –ø–æ—à—Ç–∞"}), 404

        if not check_password_hash(user['password'], password):
            return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å"}), 401

        user.pop('password', None)
        return jsonify({"status": "—É—Å–ø—ñ—Ö", "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á": user}), 200
    finally:
        cursor.close()
        conn.close()

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –∫–Ω–∏–≥–∏
@app.route('/api/books', methods=['POST'])
def add_book():
    data = request.form if request.form else request.get_json()
    title = data.get('title')
    author = data.get('author')
    description = data.get('description')
    owner_id = data.get('owner_id')
    genre_id = data.get('genre_id')
    is_free = data.get('is_free', False)

    if not all([title, author, owner_id]):
        return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–ù–∞–∑–≤–∞, –∞–≤—Ç–æ—Ä —Ç–∞ ID –≤–ª–∞—Å–Ω–∏–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ"}), 400

    # –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–±–∫–ª–∞–¥–∏–Ω–∫–∏
    cover = request.files.get('cover')
    if cover and cover.filename:
        filename = secure_filename(f"{uuid.uuid4()}_{cover.filename}")
        cover_path = os.path.join('static/uploads', filename)
        cover.save(cover_path)
        cover_url = os.path.join('/static/uploads', filename).replace("\\", "/")
    else:
        cover_url = None

    conn = create_connection()
    cursor = conn.cursor()

    try:
        # –ü–æ—á–∞—Ç–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        conn.start_transaction()

        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–Ω–∏–≥–∏
        cursor.execute(
            """INSERT INTO books 
               (title, author, description, genre_id, cover_url, owner_id, is_free) 
               VALUES (%s, %s, %s, %s, %s, %s, %s)""",
            (title, author, description, genre_id, cover_url, owner_id, is_free)
        )
        book_id = cursor.lastrowid

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –≤–ª–∞—Å–Ω–∏–∫–∞
        cursor.execute(
            "SELECT username FROM users WHERE id = %s",
            (owner_id,)
        )
        owner_result = cursor.fetchone()
        owner_name = owner_result[0] if owner_result else "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"

        # –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –º–∞—é—Ç—å —Ü—é –∫–Ω–∏–≥—É –≤ —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–æ–≥–æ
        cursor.execute("""
                   SELECT w.user_id, u.email, u.username 
                   FROM wishlist w 
                   JOIN users u ON w.user_id = u.id 
                   WHERE (LOWER(w.title) = LOWER(%s) AND LOWER(w.author) = LOWER(%s))
                   AND w.user_id != %s
               """, (f"%{title.lower()}%", f"%{author.lower()}%", owner_id))

        wishlist_matches = cursor.fetchall()
        notification_count = 0

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –º–∞—é—Ç—å —Ü—é –∫–Ω–∏–≥—É –≤ —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–æ–≥–æ
        for match in wishlist_matches:
            user_id, email, username = match

            # –¢–µ–∫—Å—Ç —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
            notification_text = f"–ù–æ–≤–∞ –∫–Ω–∏–≥–∞ '{title}' –≤—ñ–¥ {author} –¥–æ–¥–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {owner_name}. –¶—è –∫–Ω–∏–≥–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤–∞—à–æ–º—É —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–æ–≥–æ!"

            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
            cursor.execute(
                """INSERT INTO notifications 
                   (user_id, content, type, related_id) 
                   VALUES (%s, %s, %s, %s)""",
                (user_id, notification_text, 'wishlist_match', book_id)
            )
            notification_count += 1

        conn.commit()

        return jsonify({
            "status": "—É—Å–ø—ñ—Ö",
            "id": book_id,
            "—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è_–≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ": notification_count,
            "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": f"–ö–Ω–∏–≥—É —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ! {notification_count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –æ—Ç—Ä–∏–º–∞–ª–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è."
        }), 201
    except Error as e:
        conn.rollback()
        return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": str(e)}), 400
    finally:
        cursor.close()
        conn.close()

@app.route('/static/uploads/<filename>')
def uploaded_file(filename):
    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)

# –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–Ω–∏–≥—É
@app.route('/api/books/<int:book_id>', methods=['PUT'])
def update_book(book_id):
    data = request.form if request.form else request.get_json()
    title = data.get('title')
    author = data.get('author')
    description = data.get('description')
    genre_id = data.get('genre_id')
    is_free = data.get('is_free')

    conn = create_connection()
    cursor = conn.cursor()

    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∫–Ω–∏–≥–∏
        cursor.execute("SELECT cover_url, owner_id FROM books WHERE id = %s", (book_id,))
        result = cursor.fetchone()

        if not result:
            return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–ö–Ω–∏–≥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}), 404

        current_cover, owner_id = result

        cover_url = current_cover
        # –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –æ–±–∫–ª–∞–¥–∏–Ω–∫–∏
        if 'cover' in request.files:
            cover = request.files['cover']
            if cover and allowed_file(cover.filename):
                filename = secure_filename(f"{uuid.uuid4()}_{cover.filename}")
                filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
                cover.save(filepath)
                cover_url = f"/static/uploads/{filename}"

                # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ—ó –æ–±–∫–ª–∞–¥–∏–Ω–∫–∏, —è–∫—â–æ –≤–æ–Ω–∞ —ñ—Å–Ω—É—î
                if current_cover and os.path.exists(os.path.join('static', current_cover.lstrip('/'))):
                    os.remove(os.path.join('static', current_cover.lstrip('/')))

        # –ü–æ–±—É–¥–æ–≤–∞ SQL –∑–∞–ø–∏—Ç—É –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        update_fields = []
        params = []

        if title:
            update_fields.append("title = %s")
            params.append(title)
        if author:
            update_fields.append("author = %s")
            params.append(author)
        if description is not None:
            update_fields.append("description = %s")
            params.append(description)
        if genre_id:
            update_fields.append("genre_id = %s")
            params.append(genre_id)
        if is_free is not None:
            update_fields.append("is_free = %s")
            params.append(is_free)
        if cover_url is not None:
            update_fields.append("cover_url = %s")
            params.append(cover_url)

        if update_fields:
            params.append(book_id)
            query = f"UPDATE books SET {', '.join(update_fields)} WHERE id = %s"
            cursor.execute(query, params)
            conn.commit()

            # –Ø–∫—â–æ –∑–º—ñ–Ω–∏–ª–∏—Å—è –æ—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ –∫–Ω–∏–≥–∏, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–ø–∏—Å–∫–∏ –±–∞–∂–∞–Ω–æ–≥–æ
            if title or author:
                # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö –ø—Ä–æ –∫–Ω–∏–≥—É
                cursor.execute("SELECT title, author FROM books WHERE id = %s", (book_id,))
                updated_book = cursor.fetchone()
                updated_title, updated_author = updated_book

                # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –≤–ª–∞—Å–Ω–∏–∫–∞
                cursor.execute("SELECT username FROM users WHERE id = %s", (owner_id,))
                owner_result = cursor.fetchone()
                owner_name = owner_result[0] if owner_result else "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"

                # –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –º–∞—é—Ç—å —Ü—é –∫–Ω–∏–≥—É –≤ —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–æ–≥–æ
                cursor.execute("""
                                SELECT w.user_id, u.username
                                FROM wishlist w 
                                JOIN users u ON w.user_id = u.id 
                                WHERE (LOWER(w.title) = LOWER(%s) AND LOWER(w.author) = LOWER(%s))
                                AND w.user_id != %s
                            """, (f"%{updated_title.lower()}%", f"%{updated_author.lower()}%", owner_id))

                wishlist_matches = cursor.fetchall()
                notification_count = 0

                # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
                for match in wishlist_matches:
                    user_id, username = match

                    # –¢–µ–∫—Å—Ç —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
                    notification_text = f"–ö–Ω–∏–≥–∞ '{updated_title}' –≤—ñ–¥ {updated_author} –±—É–ª–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {owner_name}. –¶—è –∫–Ω–∏–≥–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤–∞—à–æ–º—É —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–æ–≥–æ!"

                    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
                    cursor.execute(
                        """INSERT INTO notifications 
                           (user_id, content, type, related_id) 
                           VALUES (%s, %s, %s, %s)""",
                        (user_id, notification_text, 'wishlist_update', book_id)
                    )
                    notification_count += 1

                conn.commit()
                return jsonify({
                    "status": "—É—Å–ø—ñ—Ö",
                    "—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è_–≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ": notification_count,
                    "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–Ω–∏–≥—É —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ"
                }), 200
            else:
                return jsonify({"status": "—É—Å–ø—ñ—Ö", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–Ω–∏–≥—É —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ"}), 200
        else:
            return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–ù–µ –≤–∫–∞–∑–∞–Ω–æ –ø–æ–ª—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è"}), 400
    except Error as e:
        return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": str(e)}), 400
    finally:
        cursor.close()
        conn.close()

# –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–Ω–∏–≥–∏
@app.route('/api/books/<int:book_id>', methods=['DELETE'])
def delete_book(book_id):
    user_id = request.args.get('user_id')

    if not user_id:
        return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"}), 400

    conn = create_connection()
    cursor = conn.cursor()

    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
        cursor.execute("SELECT owner_id, cover_url FROM books WHERE id = %s", (book_id,))
        result = cursor.fetchone()

        if not result:
            return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–ö–Ω–∏–≥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}), 404

        owner_id, cover_url = result

        if int(owner_id) != int(user_id):
            return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ü—ñ—î—ó –∫–Ω–∏–≥–∏"}), 403

        # –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ–≤'—è–∑–∞–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
        cursor.execute("DELETE FROM book_reviews WHERE book_id = %s", (book_id,))
        cursor.execute("DELETE FROM exchanges WHERE book_id = %s", (book_id,))
        cursor.execute("DELETE FROM notifications WHERE related_id = %s AND type LIKE 'book_%'", (book_id,))

        # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∞–º–æ—ó –∫–Ω–∏–≥–∏
        cursor.execute("DELETE FROM books WHERE id = %s", (book_id,))

        # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É –æ–±–∫–ª–∞–¥–∏–Ω–∫–∏, —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î
        if cover_url and os.path.exists(os.path.join('static', cover_url.lstrip('/'))):
            os.remove(os.path.join('static', cover_url.lstrip('/')))

        conn.commit()
        return jsonify({"status": "—É—Å–ø—ñ—Ö", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–ö–Ω–∏–≥—É —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ"}), 200
    except Error as e:
        conn.rollback()
        return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": str(e)}), 400
    finally:
        cursor.close()
        conn.close()

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—Å—ñ—Ö –∫–Ω–∏–≥ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é
@app.route('/api/books', methods=['GET'])
def get_books():
    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
    title = request.args.get('title', '')
    author = request.args.get('author', '')
    genre_id = request.args.get('genre_id')
    region = request.args.get('region', '')
    owner_id = request.args.get('owner_id')
    owner_id_not = request.args.get('owner_id_not')
    is_free = request.args.get('is_free')
    status = request.args.get('status', '')

    conn = create_connection()
    cursor = conn.cursor(dictionary=True)

    try:
        # –ë–∞–∑–æ–≤–∏–π SQL –∑–∞–ø–∏—Ç
        query = """
        SELECT b.*, u.username as owner_name, u.region as owner_region, g.name as genre_name 
        FROM books b 
        JOIN users u ON b.owner_id = u.id
        LEFT JOIN genres g ON b.genre_id = g.id
        WHERE 1=1
        """
        params = []

        # –î–æ–¥–∞–≤–∞–Ω–Ω—è —É–º–æ–≤ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
        if title:
            query += " AND LOWER(b.title) LIKE %s"
            params.append(f"%{title.lower()}%")
        if author:
            query += " AND LOWER(b.author) LIKE %s"
            params.append(f"%{author.lower()}%")
        if genre_id:
            query += " AND b.genre_id = %s"
            params.append(genre_id)
        if region:
            query += " AND LOWER(u.region) LIKE %s"
            params.append(f"%{region.lower()}%")
        if owner_id:
            query += " AND b.owner_id = %s"
            params.append(owner_id)
        if owner_id_not:
            query += " AND b.owner_id != %s"
            params.append(owner_id_not)
        if is_free is not None:
            is_free_bool = is_free.lower() in ('true', '1', 't')
            query += " AND b.is_free = %s"
            params.append(is_free_bool)
        if status:
            query += " AND b.status = %s"
            params.append(status)

        # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        sort_by = request.args.get('sort_by', 'created_at')
        sort_order = request.args.get('sort_order', 'DESC')

        allowed_sort_fields = ['title', 'author', 'created_at', 'rating']
        allowed_sort_orders = ['ASC', 'DESC']

        if sort_by not in allowed_sort_fields:
            sort_by = 'created_at'
        if sort_order not in allowed_sort_orders:
            sort_order = 'DESC'

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–Ω–∏–≥
        count_query = """
        SELECT COUNT(*) as total 
        FROM books b 
        JOIN users u ON b.owner_id = u.id
        LEFT JOIN genres g ON b.genre_id = g.id
        WHERE 1=1
        """

        # –î–æ–¥–∞—î–º–æ —Ç—ñ –∂ —É–º–æ–≤–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –¥–æ –∑–∞–ø–∏—Ç—É –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É
        count_params = params.copy()  # –ö–æ–ø—ñ—é—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏

        if title:
            count_query += " AND LOWER(b.title) LIKE %s"
        if author:
            count_query += " AND LOWER(b.author) LIKE %s"
        if genre_id:
            count_query += " AND b.genre_id = %s"
        if region:
            count_query += " AND LOWER(u.region) LIKE %s"
        if owner_id:
            count_query += " AND b.owner_id = %s"
        if owner_id_not:
            count_query += " AND b.owner_id != %s"
        if is_free is not None:
            count_query += " AND b.is_free = %s"
        if status:
            count_query += " AND b.status = %s"

        cursor.execute(count_query, count_params)
        result = cursor.fetchone()
        total = 0
        if result:
            total = result['total']

        # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É
        cursor.execute(query, params)
        books = cursor.fetchall()

        return jsonify({
            "status": "—É—Å–ø—ñ—Ö",
            "–∫–Ω–∏–≥–∏": books,
            "–∑–∞–≥–∞–ª—å–Ω–∞_–∫—ñ–ª—å–∫—ñ—Å—Ç—å": total,
        }), 200
    except Error as e:
        return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": str(e)}), 400
    finally:
        cursor.close()
        conn.close()

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –∫–Ω–∏–≥—É
@app.route('/api/books/<int:book_id>', methods=['GET'])
def get_book(book_id):
    conn = create_connection()
    cursor = conn.cursor(dictionary=True)

    try:
        cursor.execute('''
        SELECT b.*, u.username as owner_name, u.region as owner_region, u.id as owner_id, g.name as genre_name 
        FROM books b 
        JOIN users u ON b.owner_id = u.id
        LEFT JOIN genres g ON b.genre_id = g.id
        WHERE b.id = %s
        ''', (book_id,))
        book = cursor.fetchone()

        if book:
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—ñ–≤ –ø—Ä–æ –∫–Ω–∏–≥—É
            cursor.execute('''
            SELECT br.*, u.username
            FROM book_reviews br 
            JOIN users u ON br.user_id = u.id 
            WHERE br.book_id = %s 
            ORDER BY br.created_at DESC
            ''', (book_id,))
            reviews = cursor.fetchall()

            book['–≤—ñ–¥–≥—É–∫–∏'] = reviews

            return jsonify({"status": "—É—Å–ø—ñ—Ö", "–∫–Ω–∏–≥–∞": book}), 200
        else:
            return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–ö–Ω–∏–≥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}), 404
    except Error as e:
        return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": str(e)}), 400
    finally:
        cursor.close()
        conn.close()

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É –ø—Ä–æ –∫–Ω–∏–≥—É
@app.route('/api/books/<int:book_id>/reviews', methods=['POST'])
def add_book_review(book_id):
    data = request.get_json()
    user_id = data.get('user_id')
    rating = data.get('rating')
    comment = data.get('comment')

    if not all([user_id, rating]):
        return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –æ—Ü—ñ–Ω–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ"}), 400

    try:
        rating = int(rating)
        if rating < 1 or rating > 5:
            return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–û—Ü—ñ–Ω–∫–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 5"}), 400
    except:
        return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–û—Ü—ñ–Ω–∫–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º"}), 400

    conn = create_connection()
    cursor = conn.cursor()

    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —ñ—Å–Ω—É—î –∫–Ω–∏–≥–∞
        cursor.execute("SELECT id, owner_id, title FROM books WHERE id = %s", (book_id,))
        book = cursor.fetchone()

        if not book:
            return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–ö–Ω–∏–≥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}), 404

        book_owner_id = book[1]
        book_title = book[2]

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —î –≤–ª–∞—Å–Ω–∏–∫–æ–º –∫–Ω–∏–≥–∏
        if int(user_id) == int(book_owner_id):
            return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ü—ñ–Ω–∏—Ç–∏ –≤–ª–∞—Å–Ω—É –∫–Ω–∏–≥—É"}), 400

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞–ª–∏—à–∞–≤ –≤—ñ–¥–≥—É–∫
        cursor.execute(
            "SELECT id FROM book_reviews WHERE book_id = %s AND user_id = %s",
            (book_id, user_id)
        )

        existing_review = cursor.fetchone()

        if existing_review:
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ –≤—ñ–¥–≥—É–∫—É
            review_id = existing_review[0]
            cursor.execute(
                "UPDATE book_reviews SET rating = %s, comment = %s WHERE id = %s",
                (rating, comment, review_id)
            )
        else:
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –≤—ñ–¥–≥—É–∫—É
            cursor.execute(
                "INSERT INTO book_reviews (user_id, book_id, rating, comment) VALUES (%s, %s, %s, %s)",
                (user_id, book_id, rating, comment)
            )
            review_id = cursor.lastrowid

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—å–æ—ó –æ—Ü—ñ–Ω–∫–∏ –∫–Ω–∏–≥–∏
        cursor.execute(
            """
            UPDATE books 
            SET rating = (SELECT AVG(rating) FROM book_reviews WHERE book_id = %s),
                rating_count = (SELECT COUNT(*) FROM book_reviews WHERE book_id = %s)
            WHERE id = %s
            """,
            (book_id, book_id, book_id)
        )

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–∏–π –∑–∞–ª–∏—à–∏–≤ –≤—ñ–¥–≥—É–∫
        cursor.execute("SELECT username FROM users WHERE id = %s", (user_id,))
        reviewer_name = cursor.fetchone()[0]

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –≤–ª–∞—Å–Ω–∏–∫–∞ –∫–Ω–∏–≥–∏
        notification_text = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {reviewer_name} –∑–∞–ª–∏—à–∏–≤ –≤—ñ–¥–≥—É–∫ –Ω–∞ –≤–∞—à—É –∫–Ω–∏–≥—É '{book_title}' –∑ –æ—Ü—ñ–Ω–∫–æ—é {rating}/5."

        cursor.execute(
            "INSERT INTO notifications (user_id, content, type, related_id) VALUES (%s, %s, %s, %s)",
            (book_owner_id, notification_text, 'book_review', book_id)
        )

        conn.commit()

        return jsonify({
            "status": "—É—Å–ø—ñ—Ö",
            "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–í—ñ–¥–≥—É–∫ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ",
            "id": review_id
        }), 201
    except Error as e:
        conn.rollback()
        return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": str(e)}), 400
    finally:
        cursor.close()
        conn.close()

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@app.route('/api/users/<int:user_id>/reviews', methods=['POST'])
def add_user_review(user_id):
    data = request.get_json()
    reviewer_id = data.get('reviewer_id')
    rating = data.get('rating')
    comment = data.get('comment')

    if not all([reviewer_id, rating]):
        return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "ID —Ä–µ—Ü–µ–Ω–∑–µ–Ω—Ç–∞ —Ç–∞ –æ—Ü—ñ–Ω–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ"}), 400

    try:
        rating = int(rating)
        if rating < 1 or rating > 5:
            return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–û—Ü—ñ–Ω–∫–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 5"}), 400
    except:
        return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–û—Ü—ñ–Ω–∫–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º"}), 400

    conn = create_connection()
    cursor = conn.cursor()

    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        cursor.execute("SELECT id, username FROM users WHERE id = %s", (user_id,))
        user = cursor.fetchone()

        if not user:
            return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}), 404

        user_name = user[1]

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –æ—Ü—ñ–Ω—é—î —Å–µ–±–µ
        if int(reviewer_id) == int(user_id):
            return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ü—ñ–Ω–∏—Ç–∏ —Å–∞–º–æ–≥–æ —Å–µ–±–µ"}), 400

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞–ª–∏—à–∞–≤ –≤—ñ–¥–≥—É–∫
        cursor.execute(
            "SELECT id FROM user_reviews WHERE user_id = %s AND reviewer_id = %s",
            (user_id, reviewer_id)
        )

        existing_review = cursor.fetchone()

        if existing_review:
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ –≤—ñ–¥–≥—É–∫—É
            review_id = existing_review[0]
            cursor.execute(
                "UPDATE user_reviews SET rating = %s, comment = %s WHERE id = %s",
                (rating, comment, review_id)
            )
        else:
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –≤—ñ–¥–≥—É–∫—É
            cursor.execute(
                "INSERT INTO user_reviews (reviewer_id, user_id, rating, comment) VALUES (%s, %s, %s, %s)",
                (reviewer_id, user_id, rating, comment)
            )
            review_id = cursor.lastrowid

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—å–æ—ó –æ—Ü—ñ–Ω–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        cursor.execute(
            """
            UPDATE users 
            SET rating = (SELECT AVG(rating) FROM user_reviews WHERE user_id = %s),
                rating_count = (SELECT COUNT(*) FROM user_reviews WHERE user_id = %s)
            WHERE id = %s
            """,
            (user_id, user_id, user_id)
        )

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ —Ä–µ—Ü–µ–Ω–∑–µ–Ω—Ç–∞
        cursor.execute("SELECT username FROM users WHERE id = %s", (reviewer_id,))
        reviewer_name = cursor.fetchone()[0]

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        notification_text = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {reviewer_name} –∑–∞–ª–∏—à–∏–≤ –≤–∞–º –≤—ñ–¥–≥—É–∫ –∑ –æ—Ü—ñ–Ω–∫–æ—é {rating}/5."

        cursor.execute(
            "INSERT INTO notifications (user_id, content, type, related_id) VALUES (%s, %s, %s, %s)",
            (user_id, notification_text, 'user_review', reviewer_id)
        )

        conn.commit()

        return jsonify({
            "status": "—É—Å–ø—ñ—Ö",
            "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–í—ñ–¥–≥—É–∫ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ",
            "id": review_id
        }), 201
    except Error as e:
        conn.rollback()
        return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": str(e)}), 400
    finally:
        cursor.close()
        conn.close()

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∂–∞–Ω—Ä—ñ–≤
@app.route('/api/genres', methods=['GET'])
def get_genres():
    conn = create_connection()
    cursor = conn.cursor(dictionary=True)

    try:
        cursor.execute("SELECT * FROM genres ORDER BY name")
        genres = cursor.fetchall()
        return jsonify({"status": "—É—Å–ø—ñ—Ö", "–∂–∞–Ω—Ä–∏": genres}), 200
    except Error as e:
        return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": str(e)}), 400
    finally:
        cursor.close()
        conn.close()

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–Ω–∏–≥–∏ –≤ —Å–ø–∏—Å–æ–∫ –±–∞–∂–∞–Ω–æ–≥–æ
@app.route('/api/wishlist', methods=['POST'])
def add_to_wishlist():
    data = request.get_json()
    user_id = data.get('user_id')
    title = data.get('title')
    author = data.get('author')
    genre_id = data.get('genre_id')

    if not all([user_id, title]):
        return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –Ω–∞–∑–≤–∞ –∫–Ω–∏–≥–∏ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ"}), 400

    conn = create_connection()
    cursor = conn.cursor()

    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–∞–∫–æ—ó –∫–Ω–∏–≥–∏ —É —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–æ–≥–æ
        cursor.execute(
            "SELECT id FROM wishlist WHERE user_id = %s AND LOWER(title) = LOWER(%s) AND (author IS NULL OR LOWER(author) = LOWER(%s))",
            (user_id, title, author or "")
        )

        existing = cursor.fetchone()
        if existing:
            return jsonify({
                "status": "–ø–æ–º–∏–ª–∫–∞",
                "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–¶—è –∫–Ω–∏–≥–∞ –≤–∂–µ —î —É –≤–∞—à–æ–º—É —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–æ–≥–æ"
            }), 400

        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤ —Å–ø–∏—Å–æ–∫ –±–∞–∂–∞–Ω–æ–≥–æ
        cursor.execute(
            "INSERT INTO wishlist (user_id, title, author, genre_id) VALUES (%s, %s, %s, %s)",
            (user_id, title, author, genre_id)
        )
        conn.commit()
        wishlist_id = cursor.lastrowid

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –≤–∂–µ —Ç–∞–∫–∞ –∫–Ω–∏–≥–∞ –≤ –∫–∞—Ç–∞–ª–æ–∑—ñ
        cursor.execute("""
                    SELECT b.id, b.title, b.author, u.username, u.id as owner_id, b.status
                    FROM books b 
                    JOIN users u ON b.owner_id = u.id 
                    WHERE b.status = '–¥–æ—Å—Ç—É–ø–Ω–∞' AND 
                          (LOWER(b.title) LIKE %s) AND
                          (u.id != %s)
                """, (f"%{title.lower()}%", user_id))

        matching_books = cursor.fetchall()

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–æ –Ω–∞—è–≤–Ω—ñ –∫–Ω–∏–≥–∏
        notifications = []
        for book in matching_books:
            book_id, book_title, book_author, owner_name, owner_id, status = book

            notification_text = f"–ó–Ω–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥—É '{book_title}' –≤—ñ–¥ {book_author}, —è–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤–∞—à–æ–º—É —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–æ–≥–æ! –í–ª–∞—Å–Ω–∏–∫: {owner_name}"

            cursor.execute(
                "INSERT INTO notifications (user_id, content, type, related_id) VALUES (%s, %s, %s, %s)",
                (user_id, notification_text, 'wishlist_match', book_id)
            )

            notifications.append({
                "–∫–Ω–∏–≥–∞_id": book_id,
                "–Ω–∞–∑–≤–∞": book_title,
                "–∞–≤—Ç–æ—Ä": book_author,
                "–≤–ª–∞—Å–Ω–∏–∫": owner_name
            })

        conn.commit()

        return jsonify({
            "status": "—É—Å–ø—ñ—Ö",
            "id": wishlist_id,
            "–∑–Ω–∞–π–¥–µ–Ω—ñ_–∫–Ω–∏–≥–∏": notifications,
            "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": f"–ö–Ω–∏–≥—É –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–æ–≥–æ. –ó–Ω–∞–π–¥–µ–Ω–æ {len(notifications)} –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –∫–Ω–∏–≥."
        }), 201
    except Error as e:
        return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": str(e)}), 400
    finally:
        cursor.close()
        conn.close()

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–∏—Ö –∫–Ω–∏–≥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@app.route('/api/wishlist/<int:user_id>', methods=['GET'])
def get_wishlist(user_id):
    conn = create_connection()
    cursor = conn.cursor(dictionary=True)

    try:
        cursor.execute('''
        SELECT w.*, g.name as genre_name 
        FROM wishlist w 
        LEFT JOIN genres g ON w.genre_id = g.id 
        WHERE w.user_id = %s
        ORDER BY w.created_at DESC
        ''', (user_id,))
        wishlist = cursor.fetchall()

        # –î–ª—è –∫–æ–∂–Ω–æ—ó –∫–Ω–∏–≥–∏ –≤ —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–æ–≥–æ –∑–Ω–∞—Ö–æ–¥–∏–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏
        for item in wishlist:
            cursor.execute("""
                SELECT b.id, b.title, b.author, u.username as owner_name, u.id as owner_id, 
                       b.cover_url, b.is_free, b.status
                FROM books b 
                JOIN users u ON b.owner_id = u.id 
                WHERE b.status = '–¥–æ—Å—Ç—É–ø–Ω–∞' AND 
                      (LOWER(w.title) = LOWER(%s) AND LOWER(w.author) = LOWER(%s)) AND
                      u.id != %s
                LIMIT 5
            """, (f"%{item['title'].lower()}%", f"%{item.get('author', '').lower()}%", user_id))

            item['–¥–æ—Å—Ç—É–ø–Ω—ñ_–≤–∞—Ä—ñ–∞–Ω—Ç–∏'] = cursor.fetchall()

        return jsonify({"status": "—É—Å–ø—ñ—Ö", "—Å–ø–∏—Å–æ–∫_–±–∞–∂–∞–Ω–æ–≥–æ": wishlist}), 200
    except Error as e:
        return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": str(e)}), 400
    finally:
        cursor.close()
        conn.close()

# –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–Ω–∏–≥–∏ –∑—ñ —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–æ–≥–æ
@app.route('/api/wishlist/<int:wishlist_id>', methods=['DELETE'])
def delete_from_wishlist(wishlist_id):
    user_id = request.args.get('user_id')

    if not user_id:
        return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"}), 400

    conn = create_connection()
    cursor = conn.cursor()

    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
        cursor.execute("SELECT user_id FROM wishlist WHERE id = %s", (wishlist_id,))
        result = cursor.fetchone()

        if not result:
            return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}), 404

        if int(result[0]) != int(user_id):
            return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ü—å–æ–≥–æ –∑–∞–ø–∏—Å—É"}), 403

        cursor.execute("DELETE FROM wishlist WHERE id = %s", (wishlist_id,))
        conn.commit()

        return jsonify({"status": "—É—Å–ø—ñ—Ö", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–ó–∞–ø–∏—Å —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑—ñ —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–æ–≥–æ"}), 200
    except Error as e:
        return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": str(e)}), 400
    finally:
        cursor.close()
        conn.close()

# –ó–∞–ø–∏—Ç –Ω–∞ –æ–±–º—ñ–Ω
@app.route('/api/exchanges', methods=['POST'])
def request_exchange():
    data = request.get_json()
    book_id = data.get('book_id')
    borrower_id = data.get('borrower_id')
    message = data.get('message', '')

    if not all([book_id, borrower_id]):
        return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "ID –∫–Ω–∏–≥–∏ —Ç–∞ ID –ø–æ–∑–∏—á–∞–ª—å–Ω–∏–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ"}), 400

    conn = create_connection()
    cursor = conn.cursor()

    try:
        # –ü–æ—á–∞—Ç–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        conn.start_transaction()

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–Ω–∏–≥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
        cursor.execute("SELECT status, owner_id, title, author FROM books WHERE id = %s", (book_id,))
        book = cursor.fetchone()

        if not book:
            return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–ö–Ω–∏–≥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}), 404

        status, owner_id, title, author = book

        if status != '–¥–æ—Å—Ç—É–ø–Ω–∞':
            return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–ö–Ω–∏–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –æ–±–º—ñ–Ω—É"}), 400

        if int(owner_id) == int(borrower_id):
            return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–∑–∏—á–∏—Ç–∏ –≤–ª–∞—Å–Ω—É –∫–Ω–∏–≥—É"}), 400

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –≤–ª–∞—Å–Ω–∏–∫–∞ —ñ –ø–æ–∑–∏—á–∞–ª—å–Ω–∏–∫–∞
        cursor.execute("SELECT username FROM users WHERE id = %s", (owner_id,))
        owner_name = cursor.fetchone()[0]

        cursor.execute("SELECT username FROM users WHERE id = %s", (borrower_id,))
        borrower_name = cursor.fetchone()[0]

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É –Ω–∞ –æ–±–º—ñ–Ω
        cursor.execute(
            "INSERT INTO exchanges (book_id, borrower_id) VALUES (%s, %s)",
            (book_id, borrower_id)
        )

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∫–Ω–∏–≥–∏
        cursor.execute(
            "UPDATE books SET status = '–∑–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω–∞' WHERE id = %s",
            (book_id,)
        )

        exchange_id = cursor.lastrowid

        # –Ø–∫—â–æ —î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å —á–∞—Ç—É
        if message:
            cursor.execute(
                "INSERT INTO messages (sender_id, receiver_id, content) VALUES (%s, %s, %s)",
                (borrower_id, owner_id, message)
            )

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –≤–ª–∞—Å–Ω–∏–∫–∞
        notification_text = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {borrower_name} –∑–∞–ø–∏—Ç—É—î –≤–∞—à—É –∫–Ω–∏–≥—É '{title}' –∞–≤—Ç–æ—Ä–∞ {author}."

        cursor.execute(
            "INSERT INTO notifications (user_id, content, type, related_id) VALUES (%s, %s, %s, %s)",
            (owner_id, notification_text, 'exchange_request', exchange_id)
        )

        conn.commit()

        return jsonify({
            "status": "—É—Å–ø—ñ—Ö",
            "id": exchange_id,
            "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–ó–∞–ø–∏—Ç –Ω–∞ –æ–±–º—ñ–Ω —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ"
        }), 201
    except Error as e:
        conn.rollback()
        return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": str(e)}), 400
    finally:
        cursor.close()
        conn.close()

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –æ–±–º—ñ–Ω –¥–ª—è –≤–ª–∞—Å–Ω–∏–∫–∞
@app.route('/api/exchanges/owner/<int:owner_id>', methods=['GET'])
def get_owner_exchanges(owner_id):
    status_filter = request.args.get('status')

    conn = create_connection()
    cursor = conn.cursor(dictionary=True)

    try:
        query = '''
        SELECT e.*, b.title, b.author, b.cover_url, b.genre_id, 
               u.username as borrower_name,
               g.name as genre_name 
        FROM exchanges e 
        JOIN books b ON e.book_id = b.id 
        JOIN users u ON e.borrower_id = u.id 
        LEFT JOIN genres g ON b.genre_id = g.id
        WHERE b.owner_id = %s
        '''

        params = [owner_id]

        if status_filter:
            query += " AND e.status = %s"
            params.append(status_filter)

        query += " ORDER BY e.start_date DESC"

        cursor.execute(query, params)
        exchanges = cursor.fetchall()

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –æ–±–º—ñ–Ω—É
        for exchange in exchanges:
            cursor.execute("""
                SELECT COUNT(*) as unread_count 
                FROM messages 
                WHERE receiver_id = %s AND sender_id = %s AND is_read = FALSE
            """, (owner_id, exchange['borrower_id']))

            unread = cursor.fetchone()
            exchange['–Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω—ñ_–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'] = unread['unread_count']

        return jsonify({"status": "—É—Å–ø—ñ—Ö", "–æ–±–º—ñ–Ω–∏": exchanges}), 200
    except Error as e:
        return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": str(e)}), 400
    finally:
        cursor.close()
        conn.close()

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –æ–±–º—ñ–Ω –¥–ª—è –ø–æ–∑–∏—á–∞–ª—å–Ω–∏–∫–∞
@app.route('/api/exchanges/borrower/<int:borrower_id>', methods=['GET'])
def get_borrower_exchanges(borrower_id):
    status_filter = request.args.get('status')

    conn = create_connection()
    cursor = conn.cursor(dictionary=True)

    try:
        query = '''
        SELECT e.*, b.title, b.author, b.cover_url, b.genre_id, 
               u.username as owner_name, u.id as owner_id,
               g.name as genre_name 
        FROM exchanges e 
        JOIN books b ON e.book_id = b.id 
        JOIN users u ON b.owner_id = u.id 
        LEFT JOIN genres g ON b.genre_id = g.id
        WHERE e.borrower_id = %s
        '''

        params = [borrower_id]

        if status_filter:
            query += " AND e.status = %s"
            params.append(status_filter)

        query += " ORDER BY e.start_date DESC"

        cursor.execute(query, params)
        exchanges = cursor.fetchall()

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –æ–±–º—ñ–Ω—É
        for exchange in exchanges:
            cursor.execute("""
                SELECT COUNT(*) as unread_count 
                FROM messages 
                WHERE receiver_id = %s AND sender_id = %s AND is_read = FALSE
            """, (borrower_id, exchange['owner_id']))

            unread = cursor.fetchone()
            exchange['–Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω—ñ_–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'] = unread['unread_count']

        return jsonify({"status": "—É—Å–ø—ñ—Ö", "–æ–±–º—ñ–Ω–∏": exchanges}), 200
    except Error as e:
        return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": str(e)}), 400
    finally:
        cursor.close()
        conn.close()

# –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –æ–±–º—ñ–Ω—É
@app.route('/api/exchanges/<int:exchange_id>', methods=['PUT'])
def update_exchange_status(exchange_id):
    data = request.get_json()
    new_status = data.get('status')

    if new_status not in ['–ø—Ä–∏–π–Ω—è—Ç–æ', '–≤—ñ–¥—Ö–∏–ª–µ–Ω–æ', '–æ—Ç—Ä–∏–º–∞–Ω–æ']:
        return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–ù–µ–≤—ñ—Ä–Ω–∏–π —Å—Ç–∞—Ç—É—Å"}), 400

    conn = create_connection()
    cursor = conn.cursor()

    try:
        # –ü–æ—á–∞—Ç–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        conn.start_transaction()

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –æ–±–º—ñ–Ω
        cursor.execute("""
            SELECT e.book_id, e.borrower_id, e.status, 
                   b.title, b.owner_id,
                   u1.username as borrower_name, 
                   u2.username as owner_name
            FROM exchanges e
            JOIN books b ON e.book_id = b.id
            JOIN users u1 ON e.borrower_id = u1.id
            JOIN users u2 ON b.owner_id = u2.id
            WHERE e.id = %s
        """, (exchange_id,))

        result = cursor.fetchone()

        if not result:
            return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–û–±–º—ñ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}), 404

        book_id, borrower_id, current_status, book_title, owner_id, borrower_name, owner_name = result

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å
        if current_status == '–≤—ñ–¥—Ö–∏–ª–µ–Ω–æ' and new_status != '–∑–∞–ø–∏—Ç':
            return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É"}), 400

        if current_status == '–æ—Ç—Ä–∏–º–∞–Ω–æ':
            return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –ø–æ–≤–µ—Ä–Ω–µ–Ω–æ—ó –∫–Ω–∏–≥–∏"}), 400

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –æ–±–º—ñ–Ω—É
        if new_status == '–æ—Ç—Ä–∏–º–∞–Ω–æ':
            cursor.execute(
                "UPDATE exchanges SET status = %s, end_date = CURRENT_TIMESTAMP WHERE id = %s",
                (new_status, exchange_id)
            )
        else:
            cursor.execute(
                "UPDATE exchanges SET status = %s WHERE id = %s",
                (new_status, exchange_id)
            )

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∫–Ω–∏–≥–∏
        book_status = '–¥–æ—Å—Ç—É–ø–Ω–∞'
        if new_status == '–ø—Ä–∏–π–Ω—è—Ç–æ':
            book_status = '–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞'

        cursor.execute(
            "UPDATE books SET status = %s WHERE id = %s",
            (book_status, book_id)
        )

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
        notification_text = ""
        notification_user_id = None

        if new_status == '–ø—Ä–∏–π–Ω—è—Ç–æ':
            notification_text = f"–í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –∫–Ω–∏–≥—É '{book_title}' –±—É–ª–æ –ø—Ä–∏–π–Ω—è—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {owner_name}."
            notification_user_id = borrower_id
        elif new_status == '–≤—ñ–¥—Ö–∏–ª–µ–Ω–æ':
            notification_text = f"–í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –∫–Ω–∏–≥—É '{book_title}' –±—É–ª–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {owner_name}."
            notification_user_id = borrower_id
        elif new_status == '–æ—Ç—Ä–∏–º–∞–Ω–æ':
            notification_text = f"–ö–Ω–∏–≥—É '{book_title}' –±—É–ª–æ –æ—Ç—Ä–∏–º–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {borrower_name}."
            notification_user_id = owner_id

        if notification_text and notification_user_id:
            cursor.execute(
                "INSERT INTO notifications (user_id, content, type, related_id) VALUES (%s, %s, %s, %s)",
                (notification_user_id, notification_text, 'exchange_update', exchange_id)
            )

        conn.commit()

        return jsonify({
            "status": "—É—Å–ø—ñ—Ö",
            "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": f"–°—Ç–∞—Ç—É—Å –æ–±–º—ñ–Ω—É —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ '{new_status}'"
        }), 200
    except Error as e:
        conn.rollback()
        return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": str(e)}), 400
    finally:
        cursor.close()
        conn.close()

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —á–∞—Ç—É –º—ñ–∂ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
@app.route('/api/chat/<int:user1_id>/<int:user2_id>', methods=['GET'])
def get_chat(user1_id, user2_id):
    conn = create_connection()
    cursor = conn.cursor(dictionary=True)

    try:
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        cursor.execute("""
            SELECT m.*, u_sender.username as sender_name
            FROM messages m
            JOIN users u_sender ON m.sender_id = u_sender.id
            WHERE (m.sender_id = %s AND m.receiver_id = %s)
               OR (m.sender_id = %s AND m.receiver_id = %s)
            ORDER BY m.created_at ASC
        """, (user1_id, user2_id, user2_id, user1_id))

        messages = cursor.fetchall()

        # –ü–æ–∑–Ω–∞—á–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω—ñ
        cursor.execute("""
            UPDATE messages
            SET is_read = TRUE
            WHERE sender_id = %s AND receiver_id = %s AND is_read = FALSE
        """, (user2_id, user1_id))

        conn.commit()

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –¥—Ä—É–≥–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        cursor.execute("""
            SELECT id, username
            FROM users
            WHERE id = %s
        """, (user2_id,))

        user_info = cursor.fetchone()

        return jsonify({
            "status": "—É—Å–ø—ñ—Ö",
            "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": messages,
            "—Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫": user_info
        }), 200
    except Error as e:
        return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": str(e)}), 400
    finally:
        cursor.close()
        conn.close()

#–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —á–∞—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@app.route('/api/chat/list/<int:user_id>', methods=['GET'])
def get_user_chats(user_id):
    conn = create_connection()
    cursor = conn.cursor(dictionary=True)

    try:
        cursor.execute("""
            SELECT 
                CASE 
                    WHEN sender_id = %s THEN receiver_id
                    ELSE sender_id
                END as other_user_id,
                u.username,
                SUM(CASE WHEN receiver_id = %s AND is_read = FALSE THEN 1 ELSE 0 END) as unread_count,
                MAX(m.created_at) as last_message_time
            FROM messages m
            JOIN users u ON u.id = CASE 
                                    WHEN sender_id = %s THEN receiver_id
                                    ELSE sender_id
                                    END
            WHERE sender_id = %s OR receiver_id = %s
            GROUP BY other_user_id, u.username
            ORDER BY last_message_time DESC
        """, (user_id, user_id, user_id, user_id, user_id))

        contacts = cursor.fetchall()

        return jsonify({
            "status": "—É—Å–ø—ñ—Ö",
            "–∫–æ–Ω—Ç–∞–∫—Ç–∏": contacts
        }), 200
    except Error as e:
        return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": str(e)}), 400
    finally:
        cursor.close()
        conn.close()

# –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
@app.route('/api/chat/send', methods=['POST'])
def send_message():
    data = request.get_json()
    sender_id = data.get('sender_id')
    receiver_id = data.get('receiver_id')
    content = data.get('content')

    if not all([sender_id, receiver_id, content]):
        return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–í—Å—ñ –ø–æ–ª—è –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ"}), 400

    conn = create_connection()
    cursor = conn.cursor()

    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —ñ—Å–Ω—É—é—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
        cursor.execute("SELECT id, username FROM users WHERE id IN (%s, %s)", (sender_id, receiver_id))
        users = cursor.fetchall()

        if len(users) < 2:
            return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–û–¥–Ω–æ–≥–æ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ —ñ—Å–Ω—É—î"}), 404

        # –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        cursor.execute(
            "INSERT INTO messages (sender_id, receiver_id, content) VALUES (%s, %s, %s)",
            (sender_id, receiver_id, content)
        )

        conn.commit()
        message_id = cursor.lastrowid

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞
        cursor.execute("SELECT username FROM users WHERE id = %s", (sender_id,))
        sender_name = cursor.fetchone()[0]

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        cursor.execute("""
            SELECT m.*, u.username as sender_name, u.avatar_symbol as sender_avatar
            FROM messages m
            JOIN users u ON m.sender_id = u.id
            WHERE m.id = %s
        """, (message_id,))

        message_data = cursor.fetchone()

        return jsonify({
            "status": "—É—Å–ø—ñ—Ö",
            "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ",
            "–¥–∞–Ω—ñ_–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": {
                "id": message_id,
                "sender_id": sender_id,
                "receiver_id": receiver_id,
                "content": content,
                "is_read": False,
                "created_at": message_data[5].strftime("%Y-%m-%d %H:%M:%S"),
                "sender_name": message_data[6],
                "sender_avatar": message_data[7]
            }
        }), 201
    except Error as e:
        return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": str(e)}), 400
    finally:
        cursor.close()
        conn.close()

#–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å
@app.route('/api/notifications/<int:user_id>', methods=['GET'])
def get_notifications(user_id):
    mark_read = request.args.get('mark_read', 'false').lower() == 'true'

    conn = create_connection()
    cursor = conn.cursor(dictionary=True)

    try:
        # –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–∑–Ω–∞—á–∏—Ç–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω–∏–º–∏ ‚Äî —Ä–æ–±–∏–º–æ —Ü–µ —Å–ø–æ—á–∞—Ç–∫—É
        if mark_read:
            cursor.execute("""
                UPDATE notifications
                SET is_read = 1
                WHERE user_id = %s AND is_read = 0
            """, (user_id,))
            conn.commit()

        # –ü–æ—Ç—ñ–º –≤–∏—Ç—è–≥—É—î–º–æ –í–°–Ü —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è (–Ω–µ —Ç—ñ–ª—å–∫–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω—ñ)
        cursor.execute("""
            SELECT * FROM notifications
            WHERE user_id = %s
            ORDER BY created_at DESC
        """, (user_id,))

        notifications = cursor.fetchall()

        return jsonify({
            "status": "—É—Å–ø—ñ—Ö",
            "—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è": notifications
        }), 200

    except Exception as e:
        return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": str(e)}), 400
    finally:
        cursor.close()
        conn.close()

# –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
@app.route('/api/users/search', methods=['GET'])
def search_users():
    query = request.args.get('q', '')
    region = request.args.get('region', '')

    if not query and not region:
        return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ—à—É–∫—É"}), 400

    conn = create_connection()
    cursor = conn.cursor(dictionary=True)

    try:
        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É
        sql_query = """
            SELECT id, username, full_name, region, rating
            FROM users
            WHERE 1=1
        """
        params = []

        if query:
            sql_query += " AND (LOWER(username) LIKE %s OR LOWER(full_name) LIKE %s)"
            params.extend([f"%{query.lower()}%", f"%{query.lower()}%"])

        if region:
            sql_query += " AND LOWER(region) LIKE %s"
            params.append(f"%{region.lower()}%")

        sql_query += " ORDER BY username LIMIT 20"

        cursor.execute(sql_query, params)
        users = cursor.fetchall()

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        for user in users:
            # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–Ω–∏–≥
            cursor.execute("SELECT COUNT(*) as book_count FROM books WHERE owner_id = %s", (user['id'],))
            book_count = cursor.fetchone()
            user['–∫—ñ–ª—å–∫—ñ—Å—Ç—å_–∫–Ω–∏–≥'] = book_count['book_count']

            # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–≥—É–∫—ñ–≤
            cursor.execute("SELECT COUNT(*) as review_count FROM user_reviews WHERE user_id = %s", (user['id'],))
            review_count = cursor.fetchone()
            user['–∫—ñ–ª—å–∫—ñ—Å—Ç—å_–≤—ñ–¥–≥—É–∫—ñ–≤'] = review_count['review_count']

        return jsonify({
            "status": "—É—Å–ø—ñ—Ö",
            "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ": users
        }), 200
    except Error as e:
        return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": str(e)}), 400
    finally:
        cursor.close()
        conn.close()

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@app.route('/api/statistics', methods=['GET'])
def get_statistics():
    conn = create_connection()
    cursor = conn.cursor(dictionary=True)

    try:
        # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        cursor.execute("SELECT COUNT(*) as user_count FROM users")
        user_count = cursor.fetchone()['user_count']

        # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–Ω–∏–≥
        cursor.execute("SELECT COUNT(*) as book_count FROM books")
        book_count = cursor.fetchone()['book_count']

        # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–Ω–∏–≥
        cursor.execute("SELECT COUNT(*) as available_count FROM books WHERE status = '–¥–æ—Å—Ç—É–ø–Ω–∞'")
        available_count = cursor.fetchone()['available_count']

        # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–±–º—ñ–Ω—ñ–≤
        cursor.execute("SELECT COUNT(*) as exchange_count FROM exchanges")
        exchange_count = cursor.fetchone()['exchange_count']

        # –£—Å–ø—ñ—à–Ω—ñ –æ–±–º—ñ–Ω–∏
        cursor.execute("SELECT COUNT(*) as successful_count FROM exchanges WHERE status = '–æ—Ç—Ä–∏–º–∞–Ω–æ'")
        successful_count = cursor.fetchone()['successful_count']

        # –ü–æ–ø—É–ª—è—Ä–Ω—ñ –∂–∞–Ω—Ä–∏
        cursor.execute("""
            SELECT g.name, COUNT(*) as count
            FROM books b
            JOIN genres g ON b.genre_id = g.id
            GROUP BY g.name
            ORDER BY count DESC
            LIMIT 5
        """)
        popular_genres = cursor.fetchall()

        # –ù–∞–π–Ω–æ–≤—ñ—à—ñ –∫–Ω–∏–≥–∏
        cursor.execute("""
            SELECT b.id, b.title, b.author, u.username as owner_name, b.created_at
            FROM books b
            JOIN users u ON b.owner_id = u.id
            ORDER BY b.created_at DESC
            LIMIT 5
        """)
        newest_books = cursor.fetchall()

        # –ù–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ (–∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∫–Ω–∏–≥)
        cursor.execute("""
            SELECT u.id, u.username, COUNT(*) as book_count
            FROM books b
            JOIN users u ON b.owner_id = u.id
            GROUP BY u.id, u.username
            ORDER BY book_count DESC
            LIMIT 3
        """)
        most_active_users = cursor.fetchall()

        return jsonify({
            "status": "—É—Å–ø—ñ—Ö",
            "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": {
                "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤": user_count,
                "–∫–Ω–∏–≥_–≤—Å—å–æ–≥–æ": book_count,
                "–∫–Ω–∏–≥_–¥–æ—Å—Ç—É–ø–Ω–æ": available_count,
                "–æ–±–º—ñ–Ω—ñ–≤_–≤—Å—å–æ–≥–æ": exchange_count,
                "–æ–±–º—ñ–Ω—ñ–≤_—É—Å–ø—ñ—à–Ω–∏—Ö": successful_count,
                "–ø–æ–ø—É–ª—è—Ä–Ω—ñ_–∂–∞–Ω—Ä–∏": popular_genres,
                "–Ω–æ–≤—ñ_–∫–Ω–∏–≥–∏": newest_books,
                "–∞–∫—Ç–∏–≤–Ω—ñ_–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ": most_active_users
            }
        }), 200
    except Error as e:
        return jsonify({"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": str(e)}), 400
    finally:
        cursor.close()
        conn.close()


if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)