"""
–ö–ª—ñ—î–Ω—Ç—Å—å–∫–∞ —á–∞—Å—Ç–∏–Ω–∞ –¥–æ–¥–∞—Ç–∫—É –¥–ª—è –æ–±–º—ñ–Ω—É –∫–Ω–∏–≥–∞–º–∏.
–†–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –Ω–∞ Streamlit –∑—ñ —Å—Ç–∏–ª—å–Ω–∏–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è–º.
"""

import streamlit as st
import requests
import json
from datetime import datetime
import time

# –ê–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
SERVER_URL = "http://localhost:5000/api"

# –ö–æ–ª—å–æ—Ä–æ–≤–∞ –≥–∞–º–∞
COLORS = {
    "primary": "#5D9CEC",  # –Ø—Å–∫—Ä–∞–≤–æ-—Å–∏–Ω—ñ–π
    "primary_light": "#8BB8F1",  # –°–≤—ñ—Ç–ª–æ-—Å–∏–Ω—ñ–π
    "text": "#333333",  # –¢–µ–º–Ω–æ-—Å—ñ—Ä–∏–π
    "success": "#48CFAD",  # –ó–µ–ª–µ–Ω–∏–π
    "warning": "#FFCE54",  # –ñ–æ–≤—Ç–∏–π
    "error": "#ED5565",  # –ß–µ—Ä–≤–æ–Ω–∏–π
    "background": "#F5F7FA",  # –°–≤—ñ—Ç–ª–æ-—Å—ñ—Ä–∏–π
    "surface": "#FFFFFF",  # –ë—ñ–ª–∏–π
}


# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∏–ª—é —Å—Ç–æ—Ä—ñ–Ω–∫–∏
def set_page_style():
    # CSS –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è
    st.markdown(f"""
    <style>
    .stApp {{
        background-color: {COLORS["background"]};
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }}

    h1, h2, h3, h4, h5, h6 {{
        color: {COLORS["text"]};
        font-weight: 600;
    }}

    h1 {{
        font-size: 2.2rem;
        margin-bottom: 1.5rem;
        color: {COLORS["text"]};
    }}

    h2 {{
        font-size: 1.8rem;
        margin-top: 1.5rem;
        margin-bottom: 1rem;
        color: {COLORS["text"]};
    }}

    h3 {{
        font-size: 1.5rem;
        margin-top: 1.2rem;
        margin-bottom: 0.8rem;
        color: {COLORS["text"]};
    }}
    
    .card {{
        background-color: {COLORS["surface"]};
        color: {COLORS["text"]};
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1rem;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }}
    
    .book-card {{
        background-color: {COLORS["surface"]};
        padding: 1rem;
        margin-bottom: 1rem;
        border-radius: 10px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        height: 350px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }}
    
    .book-card h3 {{
        margin-bottom: 0.3rem;
    }}
        
    .book-card p {{
        margin: 0.2rem 0;
    }}
        
    .user-card {{
        background-color: {COLORS["surface"]};
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1rem;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        align-items: center;
        gap: 1rem;
        height: 250px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }}

    .book-status-available {{
        color: {COLORS["success"]};
        font-weight: bold;
    }}

    .book-status-reserved {{
        color: {COLORS["warning"]};
        font-weight: bold;
    }}

    .book-status-borrowed {{
        color: {COLORS["primary"]};
        font-weight: bold;
    }}

    .exchange-status-pending {{
        color: {COLORS["warning"]};
        font-weight: bold;
    }}

    .exchange-status-accepted {{
        color: {COLORS["success"]};
        font-weight: bold;
    }}

    .exchange-status-rejected {{
        color: {COLORS["error"]};
        font-weight: bold;
    }}

    .exchange-status-returned {{
        color: {COLORS["primary"]};
        font-weight: bold;
    }}
    </style>
    """, unsafe_allow_html=True)


# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
st.set_page_config(
    page_title="–ö–Ω–∏–≥–æ–æ–±–º—ñ–Ω",
    page_icon="üìö",
    layout="wide"
)

# –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Å—Ç–∏–ª—ñ–≤
set_page_style()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É —Å–µ—Å—ñ—ó
if 'user' not in st.session_state:
    st.session_state.user = None
if 'page' not in st.session_state:
    st.session_state.page = 'login'
if 'active_tab' not in st.session_state:
    st.session_state.active_tab = "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–Ω–∏–≥–∏"
if 'book_filter' not in st.session_state:
    st.session_state.book_filter = {}
if 'show_book_details' not in st.session_state:
    st.session_state.show_book_details = None
if 'show_user_profile' not in st.session_state:
    st.session_state.show_user_profile = None
if 'chat_user_id' not in st.session_state:
    st.session_state.chat_user_id = None
if 'search_params' not in st.session_state:
    st.session_state.search_params = {}

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ API
def api_request(method, endpoint, data=None, params=None):
    url = f"{SERVER_URL}/{endpoint}"
    try:
        if method == "GET":
            response = requests.get(url, params=params)
        elif method == "POST":
            response = requests.post(url, json=data)
        elif method == "PUT":
            response = requests.put(url, json=data)
        elif method == "DELETE":
            response = requests.delete(url, params=params)

        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        error_message = f"–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º: {e}"
        st.error(error_message)
        return {"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": error_message}
    except json.JSONDecodeError:
        error_message = "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Å–µ—Ä–≤–µ—Ä–∞"
        st.error(error_message)
        return {"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": error_message}


def register_user(data):
    # –î–æ–¥–∞—î–º–æ –µ–º–æ–¥–∑—ñ-–∞–≤–∞—Ç–∞—Ä–∫—É
    import random
    avatars = ["üë®", "üë©", "üßë", "üë¶", "üëß", "üë®‚Äçü¶∞", "üë©‚Äçü¶∞", "üë®‚Äçü¶±", "üë©‚Äçü¶±", "üë®‚Äçü¶≤",
               "üë©‚Äçü¶≤", "üë®‚Äçü¶≥", "üë©‚Äçü¶≥", "üßî", "üßë‚Äçü¶∞", "üßë‚Äçü¶±", "üßë‚Äçü¶≤", "üßë‚Äçü¶≥"]

    # –î–æ–¥–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –µ–º–æ–¥–∑—ñ —è–∫ –∞–≤–∞—Ç–∞—Ä–∫—É
    data["avatar_symbol"] = random.choice(avatars)

    response = requests.post(
        f"{SERVER_URL}/users",
        json=data
    )
    return response.json()


def login_user(email, password):
    response = requests.post(
        f"{SERVER_URL}/login",
        json={"email": email, "password": password}
    )
    return response.json()


def get_user_profile(user_id):
    response = requests.get(f"{SERVER_URL}/users/{user_id}")
    return response.json()


def update_user_profile(user_id, data):
    response = requests.put(
        f"{SERVER_URL}/users/{user_id}",
        json=data
    )
    return response.json()


def get_books(params=None):
    url = f"{SERVER_URL}/books"
    if params:
        url += "?" + "&".join([f"{k}={v}" for k, v in params.items() if v])
    try:
        response = requests.get(url)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º: {e}")
        return {"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": f"–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º: {e}", "–∫–Ω–∏–≥–∏": []}
    except json.JSONDecodeError:
        st.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Å–µ—Ä–≤–µ—Ä–∞")
        return {"status": "–ø–æ–º–∏–ª–∫–∞", "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Å–µ—Ä–≤–µ—Ä–∞", "–∫–Ω–∏–≥–∏": []}


def get_book(book_id):
    response = requests.get(f"{SERVER_URL}/books/{book_id}")
    return response.json()


def add_book(data, files=None):
    if files:
        response = requests.post(
            f"{SERVER_URL}/books",
            data=data,
            files=files
        )
    else:
        response = requests.post(
            f"{SERVER_URL}/books",
            json=data
        )
    return response.json()


def update_book(book_id, data, files=None):
    if files:
        response = requests.put(
            f"{SERVER_URL}/books/{book_id}",
            data=data,
            files=files
        )
    else:
        response = requests.put(
            f"{SERVER_URL}/books/{book_id}",
            json=data
        )
    return response.json()


def delete_book(book_id, user_id):
    response = requests.delete(f"{SERVER_URL}/books/{book_id}?user_id={user_id}")
    return response.json()


def request_exchange(book_id, borrower_id, message=None):
    data = {
        "book_id": book_id,
        "borrower_id": borrower_id
    }
    if message:
        data["message"] = message

    response = requests.post(
        f"{SERVER_URL}/exchanges",
        json=data
    )
    return response.json()


def get_owner_exchanges(owner_id, status=None):
    url = f"{SERVER_URL}/exchanges/owner/{owner_id}"
    if status:
        url += f"?status={status}"
    response = requests.get(url)
    return response.json()


def get_borrower_exchanges(borrower_id, status=None):
    url = f"{SERVER_URL}/exchanges/borrower/{borrower_id}"
    if status:
        url += f"?status={status}"
    response = requests.get(url)
    return response.json()


def update_exchange_status(exchange_id, status):
    response = requests.put(
        f"{SERVER_URL}/exchanges/{exchange_id}",
        json={"status": status}
    )
    return response.json()


def get_genres():
    response = requests.get(f"{SERVER_URL}/genres")
    return response.json()


def add_to_wishlist(data):
    response = requests.post(
        f"{SERVER_URL}/wishlist",
        json=data
    )
    return response.json()


def get_wishlist(user_id):
    response = requests.get(f"{SERVER_URL}/wishlist/{user_id}")
    return response.json()


def delete_from_wishlist(wishlist_id, user_id):
    response = requests.delete(f"{SERVER_URL}/wishlist/{wishlist_id}?user_id={user_id}")
    return response.json()


def add_book_review(book_id, user_id, rating, comment):
    response = requests.post(
        f"{SERVER_URL}/books/{book_id}/reviews",
        json={"user_id": user_id, "rating": rating, "comment": comment}
    )
    return response.json()


def add_user_review(user_id, reviewer_id, rating, comment):
    response = requests.post(
        f"{SERVER_URL}/users/{user_id}/reviews",
        json={"reviewer_id": reviewer_id, "rating": rating, "comment": comment}
    )
    return response.json()


def get_chat_messages(user1_id, user2_id):
    response = requests.get(f"{SERVER_URL}/chat/{user1_id}/{user2_id}")
    return response.json()


def get_user_chats(user_id):
    response = requests.get(f"{SERVER_URL}/chat/list/{user_id}")
    return response.json()


def send_message(sender_id, receiver_id, content):
    response = requests.post(
        f"{SERVER_URL}/chat/send",
        json={"sender_id": sender_id, "receiver_id": receiver_id, "content": content}
    )
    return response.json()


def get_notifications(user_id, mark_read=False):
    response = requests.get(f"{SERVER_URL}/notifications/{user_id}?mark_read={str(mark_read).lower()}")
    return response.json()


def search_users(query=None, region=None):
    url = f"{SERVER_URL}/users/search"
    params = []
    if query:
        params.append(f"q={query}")
    if region:
        params.append(f"region={region}")

    if params:
        url += "?" + "&".join(params)

    response = requests.get(url)
    return response.json()


def get_statistics():
    response = requests.get(f"{SERVER_URL}/statistics")
    return response.json()


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏
def format_date(date_str):
    if not date_str:
        return ""
    try:
        date_obj = datetime.strptime(date_str, "%a, %d %b %Y %H:%M:%S %Z")
        return date_obj.strftime("%d.%m.%Y %H:%M")
    except:
        try:
            date_obj = datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S")
            return date_obj.strftime("%d.%m.%Y %H:%M")
        except:
            return date_str


# –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É –∑—ñ—Ä–æ—á–∫–∞–º–∏
def display_rating(rating):
    stars = "‚òÖ" * int(rating)
    stars += "‚òÜ" * (5 - int(rating))
    return f"{stars} ({int(rating)}/5)"


# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –¥–æ–¥–∞—Ç–∫—É
def show_login_page():
    st.title("üìö –ö–Ω–∏–≥–æ–æ–±–º—ñ–Ω")
    st.subheader("–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –æ–±–º—ñ–Ω—É –∫–Ω–∏–≥–∞–º–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é")

    col1, col2, col3 = st.columns([1, 2, 1])

    with col2:
        tab1, tab2 = st.tabs(["–í—Ö—ñ–¥", "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è"])

        with tab1:
            with st.form("login_form"):
                st.subheader("–í—Ö—ñ–¥ –¥–æ —Å–∏—Å—Ç–µ–º–∏")
                email = st.text_input("–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞")
                password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
                submit = st.form_submit_button("–£–≤—ñ–π—Ç–∏")

                if submit:
                    if email and password:
                        with st.spinner("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è..."):
                            result = login_user(email, password)
                            if result.get("status") == "—É—Å–ø—ñ—Ö":
                                st.session_state.user = result.get("–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á")
                                st.session_state.page = 'main'
                                st.rerun()
                            else:
                                st.error(result.get("–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó"))
                    else:
                        st.error("–í—Å—ñ –ø–æ–ª—è –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ")

        with tab2:
            with st.form("register_form"):
                st.subheader("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±–ª—ñ–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É")
                username = st.text_input("–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
                email = st.text_input("–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞", key="reg_email")
                password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="reg_password")
                password_confirm = st.text_input("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è", type="password")
                full_name = st.text_input("–ü–æ–≤–Ω–µ —ñ–º'—è (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)")

                col1, col2 = st.columns(2)
                with col1:
                    phone_number = st.text_input("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)")
                with col2:
                    region = st.text_input("–†–µ–≥—ñ–æ–Ω (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)")

                submit = st.form_submit_button("–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è")

                if submit:
                    if username and email and password and password_confirm:
                        if password != password_confirm:
                            st.error("–ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å")
                        else:
                            with st.spinner("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è..."):
                                result = register_user({
                                    "username": username,
                                    "email": email,
                                    "password": password,
                                    "full_name": full_name,
                                    "phone_number": phone_number,
                                    "region": region
                                })

                                if result.get("status") == "—É—Å–ø—ñ—Ö":
                                    st.success("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —É–≤—ñ–π—Ç–∏.")
                                else:
                                    st.error(result.get("–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó"))
                    else:
                        st.error("–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞ —Ç–∞ –ø–∞—Ä–æ–ª—å –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ")

    # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
    st.markdown("---")
    st.subheader("–©–æ —Ç–∞–∫–µ \"–ö–Ω–∏–≥–æ–æ–±–º—ñ–Ω\"?")
    st.write("–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ \"–ö–Ω–∏–≥–æ–æ–±–º—ñ–Ω\" –¥–æ–ø–æ–º–∞–≥–∞—î —á–∏—Ç–∞—á–∞–º –¥—ñ–ª–∏—Ç–∏—Å—è –∫–Ω–∏–≥–∞–º–∏ —Ç–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ –Ω–æ–≤—ñ —Ü—ñ–∫–∞–≤—ñ –≤–∏–¥–∞–Ω–Ω—è.")

    st.write("**–ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏:**")
    st.write("‚Ä¢ –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–ª–∞—Å–Ω–∏—Ö –∫–Ω–∏–≥ –≤ –∫–∞—Ç–∞–ª–æ–≥")
    st.write("‚Ä¢ –û–±–º—ñ–Ω –∫–Ω–∏–≥–∞–º–∏ –∑ —ñ–Ω—à–∏–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏")
    st.write("‚Ä¢ –í–µ–¥–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–∏—Ö –∫–Ω–∏–≥")
    st.write("‚Ä¢ –°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π —á–∞—Ç")
    st.write("‚Ä¢ –û—Ü—ñ–Ω–∫–∏ —Ç–∞ –≤—ñ–¥–≥—É–∫–∏ –ø—Ä–æ –∫–Ω–∏–≥–∏ —Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")


def show_main_page():
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    if not st.session_state.user:
        st.session_state.page = 'login'
        st.rerun()
        return

    # –ë—ñ—á–Ω–∞ –ø–∞–Ω–µ–ª—å –∑ –º–µ–Ω—é
    with st.sidebar:
        st.title("üìö –ö–Ω–∏–≥–æ–æ–±–º—ñ–Ω")
        st.write(f"–í—ñ—Ç–∞—î–º–æ, **{st.session_state.user['username']}**!")

        # –ú–µ–Ω—é
        st.subheader("–ú–µ–Ω—é")
        menu_options = [
            "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–Ω–∏–≥–∏",
            "–ú–æ—ó –∫–Ω–∏–≥–∏",
            "–û–±–º—ñ–Ω–∏",
            "–°–ø–∏—Å–æ–∫ –±–∞–∂–∞–Ω–æ–≥–æ",
            "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
            "–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å",
            "–ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤",
            "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        ]

        for option in menu_options:
            if st.button(option, key=f"menu_{option}", use_container_width=True):
                st.session_state.active_tab = option
                st.session_state.show_book_details = None
                st.session_state.show_user_profile = None
                st.rerun()

        if st.button("–í–∏—Ö—ñ–¥", use_container_width=True):
            st.session_state.user = None
            st.session_state.page = 'login'
            st.rerun()

    # –ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    notification_result = get_notifications(st.session_state.user["id"], mark_read=False)

    if notification_result.get("status") == "—É—Å–ø—ñ—Ö":
        notifications = [n for n in notification_result.get("—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è", []) if not n.get("is_read")]
        if notifications:
            with st.expander(f"üîî –ù–æ–≤—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è ({len(notifications)})", expanded=False):
                for notification in notifications:
                    with st.container():
                        st.markdown(f"""
                        <div class="card">
                            <p>{notification.get("content")}</p>
                            <p><small>{format_date(notification.get("created_at"))}</small></p>
                        </div>
                        """, unsafe_allow_html=True)

                if st.button("‚úÖ –ü–æ–∑–Ω–∞—á–∏—Ç–∏ –≤—Å—ñ —è–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω—ñ"):
                    get_notifications(st.session_state.user["id"], mark_read=True)
                    st.success("–£—Å—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω—ñ.")
                    st.rerun()

    # –ü–µ—Ä–µ—Ö—ñ–¥ —É —Ä–µ–∂–∏–º –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–Ω–∏–≥–∏
    if st.session_state.show_book_details:
        show_book_details(st.session_state.show_book_details)
        return

    # –ü–µ—Ä–µ—Ö—ñ–¥ —É —Ä–µ–∂–∏–º –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    elif st.session_state.show_user_profile:
        show_user_profile(st.session_state.show_user_profile)
        return

    if st.session_state.show_book_details:
        show_book_details(st.session_state.show_book_details)
    elif st.session_state.show_user_profile:
        show_user_profile(st.session_state.show_user_profile)
    elif st.session_state.active_tab == "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–Ω–∏–≥–∏":
        show_available_books()
    elif st.session_state.active_tab == "–ú–æ—ó –∫–Ω–∏–≥–∏":
        show_my_books()
    elif st.session_state.active_tab == "–û–±–º—ñ–Ω–∏":
        show_exchanges()
    elif st.session_state.active_tab == "–°–ø–∏—Å–æ–∫ –±–∞–∂–∞–Ω–æ–≥–æ":
        show_wishlist()
    elif st.session_state.active_tab == "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è":
        show_messages()
    elif st.session_state.active_tab == "–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å":
        show_my_profile()
    elif st.session_state.active_tab == "–ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤":
        show_user_search()
    elif st.session_state.active_tab == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        show_statistics_page()


def reset_details():
    st.session_state.show_book_details = None
    st.session_state.show_user_profile = None


def show_available_books():
    st.title("üìñ –î–æ—Å—Ç—É–ø–Ω—ñ –∫–Ω–∏–≥–∏")

    # –§—ñ–ª—å—Ç—Ä–∏ –ø–æ—à—É–∫—É
    with st.expander("üîç –§—ñ–ª—å—Ç—Ä–∏ –ø–æ—à—É–∫—É", expanded=False):
        col1, col2, col3 = st.columns(3)

        with col1:
            title = st.text_input("–ù–∞–∑–≤–∞ –∫–Ω–∏–≥–∏", st.session_state.book_filter.get('title', ''))

        with col2:
            author = st.text_input("–ê–≤—Ç–æ—Ä", st.session_state.book_filter.get('author', ''))

        with col3:
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∂–∞–Ω—Ä—ñ–≤
            genres_result = get_genres()
            if genres_result.get("status") == "—É—Å–ø—ñ—Ö":
                genres = genres_result.get("–∂–∞–Ω—Ä–∏", [])
                genre_options = ["–í—Å—ñ –∂–∞–Ω—Ä–∏"] + [g["name"] for g in genres]
                genre_id_map = {g["name"]: g["id"] for g in genres}

                current_genre = "–í—Å—ñ –∂–∞–Ω—Ä–∏"
                if 'genre_id' in st.session_state.book_filter:
                    for g in genres:
                        if g["id"] == st.session_state.book_filter['genre_id']:
                            current_genre = g["name"]
                            break

                selected_genre = st.selectbox("–ñ–∞–Ω—Ä", genre_options, index=genre_options.index(current_genre))
            else:
                selected_genre = "–í—Å—ñ –∂–∞–Ω—Ä–∏"
                genre_id_map = {}

        col1, col2, col3 = st.columns(3)

        with col1:
            region = st.text_input("–†–µ–≥—ñ–æ–Ω –≤–ª–∞—Å–Ω–∏–∫–∞", st.session_state.book_filter.get('region', ''))

        with col2:
            is_free_options = ["–í—Å—ñ –∫–Ω–∏–≥–∏", "–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ", "–û–±–º—ñ–Ω"]
            is_free_index = 0
            if 'is_free' in st.session_state.book_filter:
                is_free_index = 1 if st.session_state.book_filter['is_free'] == 'true' else 2

            is_free = st.selectbox("–¢–∏–ø", is_free_options, index=is_free_index)

        with col3:
            sort_options = {
                "created_at_DESC": "–°–ø–æ—á–∞—Ç–∫—É –Ω–æ–≤—ñ—à—ñ",
                "created_at_ASC": "–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–∞—Ä—ñ—à—ñ",
                "title_ASC": "–ù–∞–∑–≤–∞ (–ê-–Ø)",
                "title_DESC": "–ù–∞–∑–≤–∞ (–Ø-–ê)",
                "rating_DESC": "–†–µ–π—Ç–∏–Ω–≥ (—Å–ø–∞–¥–∞–Ω–Ω—è)",
                "rating_ASC": "–†–µ–π—Ç–∏–Ω–≥ (–∑—Ä–æ—Å—Ç–∞–Ω–Ω—è)"
            }

            default_sort = st.session_state.book_filter.get('sort_by',
                                                            'created_at') + '_' + st.session_state.book_filter.get(
                'sort_order', 'DESC')
            if default_sort not in sort_options:
                default_sort = "created_at_DESC"

            sort_option = st.selectbox(
                "–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è",
                options=list(sort_options.keys()),
                format_func=lambda x: sort_options[x],
                index=list(sort_options.keys()).index(default_sort)
            )

        col1, col2 = st.columns(2)

        with col1:
            if st.button("–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏", use_container_width=True):
                # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
                st.session_state.book_filter = {
                    'title': title,
                    'author': author,
                    'region': region,
                    'sort_by': sort_option.split('_')[0],
                    'sort_order': sort_option.split('_')[1]
                }

                # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∂–∞–Ω—Ä—É
                if selected_genre != "–í—Å—ñ –∂–∞–Ω—Ä–∏":
                    st.session_state.book_filter['genre_id'] = genre_id_map.get(selected_genre)
                elif 'genre_id' in st.session_state.book_filter:
                    del st.session_state.book_filter['genre_id']

                # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–∏–ø—É (–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ/–æ–±–º—ñ–Ω)
                if is_free == "–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ":
                    st.session_state.book_filter['is_free'] = 'true'
                elif is_free == "–û–±–º—ñ–Ω":
                    st.session_state.book_filter['is_free'] = 'false'
                elif 'is_free' in st.session_state.book_filter:
                    del st.session_state.book_filter['is_free']

                st.rerun()

        with col2:
            if st.button("–°–∫–∏–Ω—É—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏", use_container_width=True):
                st.session_state.book_filter = {}
                st.rerun()

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–Ω–∏–≥ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏
    filter_params = {**st.session_state.book_filter, 'status': '–¥–æ—Å—Ç—É–ø–Ω–∞'}

    # –ù–µ –ø–æ–∫–∞–∑—É—î–º–æ –≤–ª–∞—Å–Ω—ñ –∫–Ω–∏–≥–∏
    if st.session_state.user:
        filter_params['owner_id_not'] = st.session_state.user["id"]

    books_result = get_books(filter_params)

    if books_result.get("status") == "—É—Å–ø—ñ—Ö":
        books = books_result.get("–∫–Ω–∏–≥–∏", [])
        total_books = books_result.get("–∑–∞–≥–∞–ª—å–Ω–∞_–∫—ñ–ª—å–∫—ñ—Å—Ç—å", 0)

        # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –∫–Ω–∏–≥
        st.write(f"–ó–Ω–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥: {total_books}")

        if not books:
            st.info("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–Ω–∏–≥, —è–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä—ñ—è–º –ø–æ—à—É–∫—É.")
            return

        # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–Ω–∏–≥ —Å—ñ—Ç–∫–æ—é
        cols = st.columns(3)

        for i, book in enumerate(books):
            with cols[i % 3]:
                with st.container():
                    st.markdown(f"""
                    <div class="book-card">
                        <h3>{book['title']}</h3>
                        <p><em>{book['author']}</em></p>
                        <p>–ñ–∞–Ω—Ä: {book.get('genre_name') or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</p>
                        <p>–í–ª–∞—Å–Ω–∏–∫: {book.get('owner_name') or '–ù–µ–≤—ñ–¥–æ–º–æ'}</p>
                        <p>–¢–∏–ø: {"–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ" if book.get('is_free') else "–û–±–º—ñ–Ω"}</p>
                        <p>{display_rating(book.get('rating', 0))}</p>
                    </div>
                    """, unsafe_allow_html=True)

                    if st.button("–î–µ—Ç–∞–ª—ñ", key=f"book_{book['id']}"):
                        st.session_state.show_book_details = book['id']
                        st.rerun()


def show_book_details(book_id):
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –∫–Ω–∏–≥—É
    result = get_book(book_id)

    if result.get("status") != "—É—Å–ø—ñ—Ö":
        st.error(result.get("–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –∫–Ω–∏–≥—É"))
        st.button("‚Üê –ù–∞–∑–∞–¥", on_click=reset_details)
        return

    book = result.get("–∫–Ω–∏–≥–∞")

    # –í–µ—Ä—Ö–Ω—è –ø–∞–Ω–µ–ª—å –∑ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—î—é
    col1, col2 = st.columns([1,2])
    with col1:
        st.button("‚Üê –ù–∞–∑–∞–¥", on_click=reset_details)
    with col2:
        st.title(book['title'])

    st.markdown("---")

    # –û—Å–Ω–æ–≤–Ω–∏–π –≤–º—ñ—Å—Ç
    col3, col4 = st.columns([1, 2])

    with col3:
        cover_url = book.get("cover_url")
        if cover_url:
            from PIL import Image
            image_path = "." + cover_url
            try:
                image = Image.open(image_path)
                st.image(image)
            except Exception as e:
                st.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")

        st.subheader("–í–ª–∞—Å–Ω–∏–∫ –∫–Ω–∏–≥–∏")
        st.markdown(f"""
        <div class="card" style="line-height: 1.6;">
        <div><h4>{book.get('owner_name') or '–ù–µ–≤—ñ–¥–æ–º–æ'}</h4></div>
        <div>–†–µ–≥—ñ–æ–Ω: {book.get('owner_region') or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</div>
        </div>
        """, unsafe_allow_html=True)

        # –ö–Ω–æ–ø–∫–∏ –¥—ñ–π
        if book["status"] == "–¥–æ—Å—Ç—É–ø–Ω–∞" and book["owner_id"] != st.session_state.user["id"]:

            # –ü—Ä–∞–ø–æ—Ä —Ñ–æ—Ä–º–∏ –æ–±–º—ñ–Ω—É
            if "show_exchange_form" not in st.session_state:
                st.session_state.show_exchange_form = False

            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑—É —Ñ–æ—Ä–º–∏
            if st.button("–ó–∞–ø–∏—Ç–∞—Ç–∏ –æ–±–º—ñ–Ω", type="primary", use_container_width=True):
                st.session_state.show_exchange_form = True
                st.rerun()

            # –§–æ—Ä–º–∞ –æ–±–º—ñ–Ω—É
            if st.session_state.show_exchange_form:
                with st.form(key="exchange_request_form"):
                    st.subheader("–ó–∞–ø–∏—Ç –Ω–∞ –æ–±–º—ñ–Ω")
                    message = st.text_area("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–ª–∞—Å–Ω–∏–∫—É (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)",
                                           placeholder="–ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–ª–∞—Å–Ω–∏–∫—É –∫–Ω–∏–≥–∏")
                    submit = st.form_submit_button("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–ø–∏—Ç", use_container_width=True)

                    if submit:
                        with st.spinner("–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É..."):
                            result = request_exchange(book["id"], st.session_state.user["id"], message)
                            if result.get("status") == "—É—Å–ø—ñ—Ö":
                                st.success("–ó–∞–ø–∏—Ç –Ω–∞ –æ–±–º—ñ–Ω —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!")
                                st.session_state.show_exchange_form = False
                                time.sleep(2)
                                reset_details()
                                st.rerun()
                            else:
                                st.error(result.get("–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–ø–∏—Ç—É"))

            # –ù–∞–ø–∏—Å–∞—Ç–∏ –≤–ª–∞—Å–Ω–∏–∫—É
            if st.button("–ù–∞–ø–∏—Å–∞—Ç–∏ –≤–ª–∞—Å–Ω–∏–∫—É", use_container_width=True):
                st.session_state.chat_user_id = book["owner_id"]
                st.session_state.active_tab = "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
                st.session_state.show_book_details = None
                st.rerun()

        elif book["owner_id"] == st.session_state.user["id"]:

            # üîÅ –ü—Ä–∞–ø–æ—Ä —Ñ–æ—Ä–º–∏ –æ–±–º—ñ–Ω—É
            if "show_exchange_form" not in st.session_state:
                st.session_state.show_exchange_form = False

            col1, col2 = st.columns(2)
            with col1:
                if st.button("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏", use_container_width=True):
                    st.session_state.edit_book = book
                    st.rerun()
            with col2:
                if st.button("–í–∏–¥–∞–ª–∏—Ç–∏", use_container_width=True):
                    with st.spinner("–í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–Ω–∏–≥–∏..."):
                        result = delete_book(book["id"], st.session_state.user["id"])
                        if result.get("status") == "—É—Å–ø—ñ—Ö":
                            st.success("–ö–Ω–∏–≥—É —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!")
                            time.sleep(2)
                            reset_details()
                            st.rerun()
                        else:
                            st.error(result.get("–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–Ω–∏–≥–∏"))

    with col4:
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–Ω–∏–≥—É
        st.subheader("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–Ω–∏–≥—É")

        book_type = "–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ" if book.get("is_free") else "–û–±–º—ñ–Ω"

        status_text = ""
        if book["status"] == "–¥–æ—Å—Ç—É–ø–Ω–∞":
            status_text = '<span class="book-status-available">–î–æ—Å—Ç—É–ø–Ω–∞</span>'
        elif book["status"] == "–∑–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω–∞":
            status_text = '<span class="book-status-reserved">–ó–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω–∞</span>'
        elif book["status"] == "–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞":
            status_text = '<span class="book-status-borrowed">–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞</span>'

        st.markdown(f"""
        <div style="background-color: {COLORS["surface"]}; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
            <p><strong>–ê–≤—Ç–æ—Ä:</strong> {book["author"]}</p>
            <p><strong>–ñ–∞–Ω—Ä:</strong> {book.get("genre_name") or "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}</p>
            <p><strong>–¢–∏–ø:</strong> {book_type}</p>
            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> {status_text}</p>
            <p><strong>–†–µ–π—Ç–∏–Ω–≥:</strong> {display_rating(book.get("rating") or 0)}</p>
            <p><strong>–î–æ–¥–∞–Ω–æ:</strong> {format_date(book.get("created_at"))}</p>
        </div>
        """, unsafe_allow_html=True)

        if "description" in book and book["description"]:
            st.subheader("–û–ø–∏—Å")
            st.write(book["description"])

        # –í—ñ–¥–≥—É–∫–∏ –ø—Ä–æ –∫–Ω–∏–≥—É
        st.subheader("–í—ñ–¥–≥—É–∫–∏")

        reviews = book.get("–≤—ñ–¥–≥—É–∫–∏", [])

        # –§–æ—Ä–º–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –≤—ñ–¥–≥—É–∫—É
        if book["owner_id"] != st.session_state.user["id"]:
            with st.expander("–î–æ–¥–∞—Ç–∏ –≤—ñ–¥–≥—É–∫", expanded=False):
                with st.form(key="add_review_form"):
                    rating = st.slider("–û—Ü—ñ–Ω–∫–∞", min_value=1, max_value=5, value=5)
                    comment = st.text_area("–ö–æ–º–µ–Ω—Ç–∞—Ä", placeholder="–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤—ñ–π –≤—ñ–¥–≥—É–∫ –ø—Ä–æ –∫–Ω–∏–≥—É")
                    submit = st.form_submit_button("–î–æ–¥–∞—Ç–∏ –≤—ñ–¥–≥—É–∫", use_container_width=True)

                    if submit:
                        with st.spinner("–î–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É..."):
                            result = add_book_review(book["id"], st.session_state.user["id"], rating, comment)
                            if result.get("status") == "—É—Å–ø—ñ—Ö":
                                st.success("–í—ñ–¥–≥—É–∫ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")
                                time.sleep(2)
                                st.rerun()
                            else:
                                st.error(result.get("–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≤—ñ–¥–≥—É–∫—É"))

        with st.expander(f"–í—ñ–¥–≥—É–∫–∏ ({len(reviews)})", expanded=False):
            if reviews:
                for review in reviews:
                    st.markdown(f"""
                    <div style="background-color: {COLORS["surface"]}; padding: 15px; border-radius: 8px; margin-bottom: 10px;">
                        <p><strong>{review.get('username')}</strong> ‚Ä¢ {format_date(review.get('created_at'))}</p>
                        <p>{display_rating(review.get('rating') or 0)}</p>
                        <p>{review.get('comment') or "–ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è"}</p>
                    </div>
                    """, unsafe_allow_html=True)
            else:
                st.info("–£ —Ü—ñ—î—ó –∫–Ω–∏–≥–∏ —â–µ –Ω–µ–º–∞—î –≤—ñ–¥–≥—É–∫—ñ–≤.")

    if 'edit_book' in st.session_state:
        book = st.session_state.edit_book
        # –†–µ–∂–∏–º —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–Ω–∏–≥–∏
        with st.form(key="edit_book_form"):
            book = st.session_state.edit_book
            st.subheader(f"–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–Ω–∏–≥–∏: {book['title']}")

            col1, col2 = st.columns(2)
            with col1:
                title = st.text_input("–ù–∞–∑–≤–∞ –∫–Ω–∏–≥–∏", value=book.get("title", ""), key="edit_title")
            with col2:
                author = st.text_input("–ê–≤—Ç–æ—Ä", value=book.get("author", ""), key="edit_author")

            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∂–∞–Ω—Ä—ñ–≤
            genres_result = get_genres()
            if genres_result.get("status") == "—É—Å–ø—ñ—Ö":
                genres = genres_result.get("–∂–∞–Ω—Ä–∏", [])
                genre_options = ["–ù–µ –≤–∫–∞–∑–∞–Ω–æ"] + [g["name"] for g in genres]
                genre_id_map = {g["name"]: g["id"] for g in genres}

                current_genre_index = 0
                if book.get("genre_id"):
                    current_genre = next((g["name"] for g in genres if g["id"] == book["genre_id"]), "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
                    if current_genre in genre_options:
                        current_genre_index = genre_options.index(current_genre)

                selected_genre = st.selectbox("–ñ–∞–Ω—Ä", genre_options, index=current_genre_index, key="edit_genre")
            else:
                selected_genre = "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
                genre_id_map = {}

            is_free = st.checkbox("–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ (–Ω–µ –≤–∏–º–∞–≥–∞—î –æ–±–º—ñ–Ω—É)", value=book.get("is_free", False),
                                  key="edit_is_free")

            description = st.text_area("–û–ø–∏—Å –∫–Ω–∏–≥–∏", value=book.get("description", ""), key="edit_description")

            uploaded_cover = st.file_uploader("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–æ—Ç–æ (jpg, png)", type=["jpg", "jpeg", "png"],
                                              key="edit_cover")
            col1, col2 = st.columns(2)
            with col1:
                submit = st.form_submit_button("–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏", use_container_width=True)
            with col2:
                cancel = st.form_submit_button("–°–∫–∞—Å—É–≤–∞—Ç–∏", use_container_width=True)

            if submit:
                if title and author:
                    with st.spinner("–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–Ω–∏–≥–∏..."):
                        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö
                        book_data = {
                            "title": title,
                            "author": author,
                            "description": description,
                            "owner_id": st.session_state.user["id"],
                            "genre_id": genre_id_map.get(
                                selected_genre) if selected_genre != "–ù–µ –≤–∫–∞–∑–∞–Ω–æ" else None,
                            "is_free": int(is_free),
                        }

                        if selected_genre != "–ù–µ –≤–∫–∞–∑–∞–Ω–æ":
                            book_data["genre_id"] = genre_id_map.get(selected_genre)

                        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–Ω–∏–≥–∏
                        result = update_book(book["id"], book_data, files={"cover": uploaded_cover})

                        if result.get("status") == "—É—Å–ø—ñ—Ö":
                            st.success("–ö–Ω–∏–≥—É —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!")
                            del st.session_state.edit_book
                            time.sleep(2)
                            st.rerun()
                        else:
                            st.error(result.get("–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–Ω–∏–≥–∏"))
                else:
                    st.error("–ù–∞–∑–≤–∞ —Ç–∞ –∞–≤—Ç–æ—Ä –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ")

            if cancel:
                del st.session_state.edit_book
                st.rerun()



def show_my_books():
    st.title("üìö –ú–æ—ó –∫–Ω–∏–≥–∏")

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –∫–Ω–∏–≥–∏
    with st.expander("üìù –î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –∫–Ω–∏–≥—É", expanded=False):
        with st.form(key="add_book_form"):
            st.subheader("–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –∫–Ω–∏–≥–∏")

            col1, col2 = st.columns(2)
            with col1:
                title = st.text_input("–ù–∞–∑–≤–∞ –∫–Ω–∏–≥–∏(–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)", key="add_title")
            with col2:
                author = st.text_input("–ê–≤—Ç–æ—Ä(–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)", key="add_author")

            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∂–∞–Ω—Ä—ñ–≤
            genres_result = get_genres()
            if genres_result.get("status") == "—É—Å–ø—ñ—Ö":
                genres = genres_result.get("–∂–∞–Ω—Ä–∏", [])
                genre_options = ["–ù–µ –≤–∫–∞–∑–∞–Ω–æ"] + [g["name"] for g in genres]
                genre_id_map = {g["name"]: g["id"] for g in genres}

                selected_genre = st.selectbox("–ñ–∞–Ω—Ä", genre_options, index=0, key="add_genre")
            else:
                selected_genre = "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
                genre_id_map = {}

            is_free = st.checkbox("–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ (–Ω–µ –≤–∏–º–∞–≥–∞—î –æ–±–º—ñ–Ω—É)", key="add_is_free")
            description = st.text_area("–û–ø–∏—Å –∫–Ω–∏–≥–∏", key="add_description")
            uploaded_cover = st.file_uploader("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–æ—Ç–æ (jpg, png)", type=["jpg", "jpeg", "png"],
                                              key="add_cover")
            submit = st.form_submit_button("–î–æ–¥–∞—Ç–∏ –∫–Ω–∏–≥—É", use_container_width=True)

            if submit:
                if title and author:
                    with st.spinner("–î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–Ω–∏–≥–∏..."):
                        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö
                        book_data = {
                            "title": title,
                            "author": author,
                            "description": description,
                            "owner_id": st.session_state.user["id"],
                            "is_free": int(is_free)
                        }

                        if selected_genre != "–ù–µ –≤–∫–∞–∑–∞–Ω–æ":
                            book_data["genre_id"] = genre_id_map.get(selected_genre)

                        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–Ω–∏–≥–∏
                        result = add_book(book_data, files={"cover": uploaded_cover})

                        if result.get("status") == "—É—Å–ø—ñ—Ö":
                            st.success(f"–ö–Ω–∏–≥—É —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")
                            time.sleep(2)
                            st.rerun()
                        else:
                            st.error(result.get("–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–Ω–∏–≥–∏"))
                else:
                    st.error("–ù–∞–∑–≤–∞ —Ç–∞ –∞–≤—Ç–æ—Ä –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ")

    # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–æ—ó—Ö –∫–Ω–∏–≥
    books_result = get_books({"owner_id": st.session_state.user["id"]})

    if books_result.get("status") == "—É—Å–ø—ñ—Ö":
        books = books_result.get("–∫–Ω–∏–≥–∏", [])

        if not books:
            st.info("–£ –≤–∞—Å –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö –∫–Ω–∏–≥.")
            return

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_books = len(books)
        available_count = len([book for book in books if book["status"] == "–¥–æ—Å—Ç—É–ø–Ω–∞"])
        reserved_count = len([book for book in books if book["status"] == "–∑–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω–∞"])
        lent_count = len([book for book in books if book["status"] == "–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞"])

        col1, col2, col3, col4 = st.columns(4)
        col1.metric("–í—Å—å–æ–≥–æ –∫–Ω–∏–≥", total_books)
        col2.metric("–î–æ—Å—Ç—É–ø–Ω—ñ", available_count)
        col3.metric("–ó–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω—ñ", reserved_count)
        col4.metric("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ", lent_count)

        # –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º
        available_books = [book for book in books if book["status"] == "–¥–æ—Å—Ç—É–ø–Ω–∞"]
        reserved_books = [book for book in books if book["status"] == "–∑–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω–∞"]
        lent_books = [book for book in books if book["status"] == "–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞"]

        # –ó–∞–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≥—Ä—É–ø–ø –∫–Ω–∏–≥
        tabs = st.tabs(["–í—Å—ñ –∫–Ω–∏–≥–∏", "–î–æ—Å—Ç—É–ø–Ω—ñ", "–ó–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω—ñ", "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ"])

        with tabs[0]:
            show_book_list(books, prefix="all")

        with tabs[1]:
            if available_books:
                show_book_list(available_books, prefix="available")
            else:
                st.info("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–Ω–∏–≥.")

        with tabs[2]:
            if reserved_books:
                show_book_list(reserved_books, prefix="reserved")
            else:
                st.info("–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω–∏—Ö –∫–Ω–∏–≥.")

        with tabs[3]:
            if lent_books:
                show_book_list(lent_books, prefix="lent")
            else:
                st.info("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏—Ö –∫–Ω–∏–≥.")
    else:
        st.error(books_result.get("–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥"))



def show_book_list(books, prefix="mybook"):
    # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–Ω–∏–≥ —Å—ñ—Ç–∫–æ—é
    cols = st.columns(3)

    for i, book in enumerate(books):
        with cols[i % 3]:
            st.markdown(f"""
            <div class="book-card">
                <h3>{book['title']}</h3>
                <p><em>{book['author']}</em></p>
                <p><strong>–ñ–∞–Ω—Ä:</strong> {book.get('genre_name') or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</p>
                <p><strong>–¢–∏–ø:</strong> {"–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ" if book.get('is_free') else "–û–±–º—ñ–Ω"}</p>
                <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span class="book-status-{book['status'].lower()}">{book['status'].capitalize()}</span></p>
                <p>{display_rating(book.get('rating', 0))}</p>
            </div>
            """, unsafe_allow_html=True)

            if st.button("–î–µ—Ç–∞–ª—ñ", key=f"{prefix}_{book['id']}_{i}"):
                st.session_state.show_book_details = book['id']
                st.rerun()


def show_exchanges():
    st.title("üîÑ –û–±–º—ñ–Ω–∏")

    # –ó–∞–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –æ–±–º—ñ–Ω—ñ–≤
    tabs = st.tabs(["–ó–∞–ø–∏—Ç–∏ –Ω–∞ –º–æ—ó –∫–Ω–∏–≥–∏", "–ú–æ—ó –∑–∞–ø–∏—Ç–∏ –Ω–∞ –∫–Ω–∏–≥–∏"])

    # –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤ –≤—ñ–¥ —ñ–Ω—à–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    with tabs[0]:
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –æ–±–º—ñ–Ω –¥–ª—è –≤–ª–∞—Å–Ω–∏–∫–∞
        result = get_owner_exchanges(st.session_state.user["id"])

        if result.get("status") == "—É—Å–ø—ñ—Ö":
            exchanges = result.get("–æ–±–º—ñ–Ω–∏", [])

            if not exchanges:
                st.info("–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –æ–±–º—ñ–Ω.")
            else:
                # –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º
                pending_requests = [ex for ex in exchanges if ex["status"] == "–∑–∞–ø–∏—Ç"]
                accepted_requests = [ex for ex in exchanges if ex["status"] == "–ø—Ä–∏–π–Ω—è—Ç–æ"]
                rejected_requests = [ex for ex in exchanges if ex["status"] == "–≤—ñ–¥—Ö–∏–ª–µ–Ω–æ"]
                returned_requests = [ex for ex in exchanges if ex["status"] == "–æ—Ç—Ä–∏–º–∞–Ω–æ"]

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                col1, col2, col3, col4 = st.columns(4)
                col1.metric("–û—á—ñ–∫—É—é—Ç—å", len(pending_requests))
                col2.metric("–ê–∫—Ç–∏–≤–Ω—ñ", len(accepted_requests))
                col3.metric("–í—ñ–¥—Ö–∏–ª–µ–Ω—ñ", len(rejected_requests))
                col4.metric("–û—Ç—Ä–∏–º–∞–Ω—ñ", len(returned_requests))

                # –ó–∞–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Å—Ç–∞—Ç—É—Å—ñ–≤
                status_tabs = st.tabs(["–û—á—ñ–∫—É—é—Ç—å", "–ê–∫—Ç–∏–≤–Ω—ñ", "–í—ñ–¥—Ö–∏–ª–µ–Ω—ñ", "–û—Ç—Ä–∏–º–∞–Ω—ñ"])

                with status_tabs[0]:
                    if pending_requests:
                        for ex in pending_requests:
                            st.markdown(f"""
                            <div class="card">
                                <h3>{ex['title']}</h3>
                                <p><em>{ex['author']}</em></p>
                                <p><strong>–ü–æ–∑–∏—á–∞–ª—å–Ω–∏–∫:</strong> {ex['borrower_name']}</p>
                                <p><strong>–î–∞—Ç–∞ –∑–∞–ø–∏—Ç—É:</strong> {format_date(ex['start_date'])}</p>
                                <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span class="exchange-status-pending">–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è</span></p>
                            </div>
                            """, unsafe_allow_html=True)

                            col1, col2, col3 = st.columns(3)
                            with col1:
                                if st.button("–ü—Ä–∏–π–Ω—è—Ç–∏", key=f"accept_{ex['id']}"):
                                    with st.spinner("–û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É..."):
                                        result = update_exchange_status(ex['id'], "–ø—Ä–∏–π–Ω—è—Ç–æ")
                                        if result.get("status") == "—É—Å–ø—ñ—Ö":
                                            st.success("–ó–∞–ø–∏—Ç –ø—Ä–∏–π–Ω—è—Ç–æ!")
                                            time.sleep(2)
                                            st.rerun()
                                        else:
                                            st.error(result.get("–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∑–∞–ø–∏—Ç—É"))
                            with col2:
                                if st.button("–í—ñ–¥—Ö–∏–ª–∏—Ç–∏", key=f"reject_{ex['id']}"):
                                    with st.spinner("–û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É..."):
                                        result = update_exchange_status(ex['id'], "–≤—ñ–¥—Ö–∏–ª–µ–Ω–æ")
                                        if result.get("status") == "—É—Å–ø—ñ—Ö":
                                            st.success("–ó–∞–ø–∏—Ç –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
                                            time.sleep(2)
                                            st.rerun()
                                        else:
                                            st.error(result.get("–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∑–∞–ø–∏—Ç—É"))
                            with col3:
                                if st.button("–ù–∞–ø–∏—Å–∞—Ç–∏", key=f"message_o_{ex['borrower_id']}"):
                                    st.session_state.chat_user_id = ex['borrower_id']
                                    st.session_state.active_tab = "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
                                    st.rerun()
                    else:
                        st.info("–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–ø–∏—Ç—ñ–≤, —è–∫—ñ –æ—á—ñ–∫—É—é—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")

                with status_tabs[1]:
                    if accepted_requests:
                        for ex in accepted_requests:
                            st.markdown(f"""
                            <div class="card">
                                <h3>{ex['title']}</h3>
                                <p><em>{ex['author']}</em></p>
                                <p><strong>–ü–æ–∑–∏—á–∞–ª—å–Ω–∏–∫:</strong> {ex['borrower_name']}</p>
                                <p><strong>–î–∞—Ç–∞ –∑–∞–ø–∏—Ç—É:</strong> {format_date(ex['start_date'])}</p>
                                <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span class="exchange-status-accepted">–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ</span></p>
                            </div>
                            """, unsafe_allow_html=True)

                            if st.button("–ù–∞–ø–∏—Å–∞—Ç–∏ –ø–æ–∑–∏—á–∞–ª—å–Ω–∏–∫—É", key=f"message_a_{ex['borrower_id']}"):
                                st.session_state.chat_user_id = ex['borrower_id']
                                st.session_state.active_tab = "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
                                st.rerun()
                    else:
                        st.info("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –æ–±–º—ñ–Ω—ñ–≤.")

                with status_tabs[2]:
                    if rejected_requests:
                        for ex in rejected_requests:
                            st.markdown(f"""
                            <div class="card">
                                <h3>{ex['title']}</h3>
                                <p><em>{ex['author']}</em></p>
                                <p><strong>–ü–æ–∑–∏—á–∞–ª—å–Ω–∏–∫:</strong> {ex['borrower_name']}</p>
                                <p><strong>–î–∞—Ç–∞ –∑–∞–ø–∏—Ç—É:</strong> {format_date(ex['start_date'])}</p>
                                <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span class="exchange-status-rejected">–í—ñ–¥—Ö–∏–ª–µ–Ω–æ</span></p>
                            </div>
                            """, unsafe_allow_html=True)
                    else:
                        st.info("–£ –≤–∞—Å –Ω–µ–º–∞—î –≤—ñ–¥—Ö–∏–ª–µ–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤.")

                with status_tabs[3]:
                    if returned_requests:
                        for ex in returned_requests:
                            st.markdown(f"""
                            <div class="card">
                                <h3>{ex['title']}</h3>
                                <p><em>{ex['author']}</em></p>
                                <p><strong>–ü–æ–∑–∏—á–∞–ª—å–Ω–∏–∫:</strong> {ex['borrower_name']}</p>
                                <p><strong>–î–∞—Ç–∞ –∑–∞–ø–∏—Ç—É:</strong> {format_date(ex['start_date'])}</p>
                                <p><strong>–î–∞—Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è:</strong> {format_date(ex['end_date'])}</p>
                                <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span class="exchange-status-returned">–û—Ç—Ä–∏–º–∞–Ω–æ</span></p>
                            </div>
                            """, unsafe_allow_html=True)
                    else:
                        st.info("–£ –≤–∞—Å –Ω–µ–º–∞—î –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –∫–Ω–∏–≥.")
        else:
            st.error(result.get("–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Ç—ñ–≤"))

    # –û–±—Ä–æ–±–∫–∞ –º–æ—ó—Ö –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –∫–Ω–∏–≥–∏ —ñ–Ω—à–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    with tabs[1]:
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –æ–±–º—ñ–Ω –¥–ª—è –ø–æ–∑–∏—á–∞–ª—å–Ω–∏–∫–∞
        result = get_borrower_exchanges(st.session_state.user["id"])

        if result.get("status") == "—É—Å–ø—ñ—Ö":
            exchanges = result.get("–æ–±–º—ñ–Ω–∏", [])

            if not exchanges:
                st.info("–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –æ–±–º—ñ–Ω.")
            else:
                # –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º
                pending_requests = [ex for ex in exchanges if ex["status"] == "–∑–∞–ø–∏—Ç"]
                accepted_requests = [ex for ex in exchanges if ex["status"] == "–ø—Ä–∏–π–Ω—è—Ç–æ"]
                rejected_requests = [ex for ex in exchanges if ex["status"] == "–≤—ñ–¥—Ö–∏–ª–µ–Ω–æ"]
                returned_requests = [ex for ex in exchanges if ex["status"] == "–æ—Ç—Ä–∏–º–∞–Ω–æ"]

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                col1, col2, col3, col4 = st.columns(4)
                col1.metric("–û—á—ñ–∫—É—é—Ç—å", len(pending_requests))
                col2.metric("–ê–∫—Ç–∏–≤–Ω—ñ", len(accepted_requests))
                col3.metric("–í—ñ–¥—Ö–∏–ª–µ–Ω—ñ", len(rejected_requests))
                col4.metric("–û—Ç—Ä–∏–º–∞–Ω—ñ", len(returned_requests))

                # –ó–∞–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Å—Ç–∞—Ç—É—Å—ñ–≤
                status_tabs = st.tabs(["–û—á—ñ–∫—É—é—Ç—å", "–ê–∫—Ç–∏–≤–Ω—ñ", "–í—ñ–¥—Ö–∏–ª–µ–Ω—ñ", "–û—Ç—Ä–∏–º–∞–Ω—ñ"])

                with status_tabs[0]:
                    if pending_requests:
                        for ex in pending_requests:
                            st.markdown(f"""
                            <div class="card">
                                <h3>{ex['title']}</h3>
                                <p><em>{ex['author']}</em></p>
                                <p><strong>–í–ª–∞—Å–Ω–∏–∫:</strong> {ex['owner_name']}</p>
                                <p><strong>–î–∞—Ç–∞ –∑–∞–ø–∏—Ç—É:</strong> {format_date(ex['start_date'])}</p>
                                <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span class="exchange-status-pending">–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è</span></p>
                            </div>
                            """, unsafe_allow_html=True)

                            col1, col2 = st.columns(2)
                            with col1:
                                if st.button("–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç", key=f"cancel_{ex['id']}"):
                                    with st.spinner("–û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É..."):
                                        result = update_exchange_status(ex['id'], "–≤—ñ–¥—Ö–∏–ª–µ–Ω–æ")
                                        if result.get("status") == "—É—Å–ø—ñ—Ö":
                                            st.success("–ó–∞–ø–∏—Ç —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
                                            time.sleep(2)
                                            st.rerun()
                                        else:
                                            st.error(result.get("–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∑–∞–ø–∏—Ç—É"))
                            with col2:
                                if st.button("–ù–∞–ø–∏—Å–∞—Ç–∏ –≤–ª–∞—Å–Ω–∏–∫—É", key=f"message_b_{ex['owner_id']}"):
                                    st.session_state.chat_user_id = ex['owner_id']
                                    st.session_state.active_tab = "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
                                    st.rerun()
                    else:
                        st.info("–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–ø–∏—Ç—ñ–≤, —è–∫—ñ –æ—á—ñ–∫—É—é—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")

                with status_tabs[1]:
                    if accepted_requests:
                        for ex in accepted_requests:
                            st.markdown(f"""
                            <div class="card">
                                <h3>{ex['title']}</h3>
                                <p><em>{ex['author']}</em></p>
                                <p><strong>–í–ª–∞—Å–Ω–∏–∫:</strong> {ex['owner_name']}</p>
                                <p><strong>–î–∞—Ç–∞ –∑–∞–ø–∏—Ç—É:</strong> {format_date(ex['start_date'])}</p>
                                <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span class="exchange-status-accepted">–ê–∫—Ç–∏–≤–Ω–æ</span></p>
                            </div>
                            """, unsafe_allow_html=True)

                            col1, col2 = st.columns(2)
                            with col1:
                                if st.button("–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–Ω–∏–≥—É", key=f"return_{ex['id']}"):
                                    with st.spinner("–û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É..."):
                                        result = update_exchange_status(ex['id'], "–æ—Ç—Ä–∏–º–∞–Ω–æ")
                                        if result.get("status") == "—É—Å–ø—ñ—Ö":
                                            st.success("–ö–Ω–∏–≥—É –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –æ—Ç—Ä–∏–º–∞–Ω—É!")
                                            time.sleep(2)
                                            st.rerun()
                                        else:
                                            st.error(result.get("–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∑–∞–ø–∏—Ç—É"))
                            with col2:
                                if st.button("–ù–∞–ø–∏—Å–∞—Ç–∏ –≤–ª–∞—Å–Ω–∏–∫—É", key=f"message_c_{ex['owner_id']}"):
                                    st.session_state.chat_user_id = ex['owner_id']
                                    st.session_state.active_tab = "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
                                    st.rerun()
                    else:
                        st.info("–£ –≤–∞—Å –Ω–µ–º–∞—î –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –∫–Ω–∏–≥.")

                with status_tabs[2]:
                    if rejected_requests:
                        for ex in rejected_requests:
                            st.markdown(f"""
                            <div class="card">
                                <h3>{ex['title']}</h3>
                                <p><em>{ex['author']}</em></p>
                                <p><strong>–í–ª–∞—Å–Ω–∏–∫:</strong> {ex['owner_name']}</p>
                                <p><strong>–î–∞—Ç–∞ –∑–∞–ø–∏—Ç—É:</strong> {format_date(ex['start_date'])}</p>
                                <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span class="exchange-status-rejected">–í—ñ–¥—Ö–∏–ª–µ–Ω–æ</span></p>
                            </div>
                            """, unsafe_allow_html=True)
                    else:
                        st.info("–£ –≤–∞—Å –Ω–µ–º–∞—î –≤—ñ–¥—Ö–∏–ª–µ–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤.")

                with status_tabs[3]:
                    if returned_requests:
                        for ex in returned_requests:
                            st.markdown(f"""
                            <div class="card">
                                <h3>{ex['title']}</h3>
                                <p><em>{ex['author']}</em></p>
                                <p><strong>–í–ª–∞—Å–Ω–∏–∫:</strong> {ex['owner_name']}</p>
                                <p><strong>–î–∞—Ç–∞ –∑–∞–ø–∏—Ç—É:</strong> {format_date(ex['start_date'])}</p>
                                <p><strong>–î–∞—Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è:</strong> {format_date(ex['end_date'])}</p>
                                <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span class="exchange-status-returned">–û—Ç—Ä–∏–º–∞–Ω–æ</span></p>
                            </div>
                            """, unsafe_allow_html=True)

                            col1, col2 = st.columns(2)
                            with col1:
                                if st.button("–û—Ü—ñ–Ω–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", key=f"review_o_{ex['owner_id']}"):
                                    with st.form(key=f"review_owner_form_{ex['owner_id']}"):
                                        st.subheader(f"–û—Ü—ñ–Ω–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {ex['owner_name']}")
                                        rating = st.slider("–û—Ü—ñ–Ω–∫–∞", min_value=1, max_value=5, value=5)
                                        comment = st.text_area("–ö–æ–º–µ–Ω—Ç–∞—Ä",
                                                               placeholder="–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤—ñ–π –≤—ñ–¥–≥—É–∫ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
                                        submit = st.form_submit_button("–î–æ–¥–∞—Ç–∏ –≤—ñ–¥–≥—É–∫", use_container_width=True)

                                        if submit:
                                            with st.spinner("–î–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É..."):
                                                result = add_user_review(
                                                    ex['owner_id'],
                                                    st.session_state.user["id"],
                                                    rating,
                                                    comment
                                                )

                                                if result.get("status") == "—É—Å–ø—ñ—Ö":
                                                    st.success("–í—ñ–¥–≥—É–∫ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")
                                                    time.sleep(2)
                                                    st.rerun()
                                                else:
                                                    st.error(
                                                        result.get("–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≤—ñ–¥–≥—É–∫—É"))
                            with col2:
                                if st.button("–û—Ü—ñ–Ω–∏—Ç–∏ –∫–Ω–∏–≥—É", key=f"review_b_{ex['book_id']}"):
                                    with st.form(key=f"review_book_form_{ex['book_id']}"):
                                        st.subheader(f"–û—Ü—ñ–Ω–∫–∞ –∫–Ω–∏–≥–∏ '{ex['title']}'")
                                        rating = st.slider("–û—Ü—ñ–Ω–∫–∞", min_value=1, max_value=5, value=5)
                                        comment = st.text_area("–ö–æ–º–µ–Ω—Ç–∞—Ä", placeholder="–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤—ñ–π –≤—ñ–¥–≥—É–∫ –ø—Ä–æ –∫–Ω–∏–≥—É")
                                        submit = st.form_submit_button("–î–æ–¥–∞—Ç–∏ –≤—ñ–¥–≥—É–∫", use_container_width=True)

                                        if submit:
                                            with st.spinner("–î–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É..."):
                                                result = add_book_review(
                                                    ex['book_id'],
                                                    st.session_state.user["id"],
                                                    rating,
                                                    comment
                                                )

                                                if result.get("status") == "—É—Å–ø—ñ—Ö":
                                                    st.success("–í—ñ–¥–≥—É–∫ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")
                                                    time.sleep(2)
                                                    st.rerun()
                                                else:
                                                    st.error(
                                                        result.get("–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≤—ñ–¥–≥—É–∫—É"))
                    else:
                        st.info("–£ –≤–∞—Å –Ω–µ–º–∞—î –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –∫–Ω–∏–≥.")
        else:
            st.error(result.get("–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Ç—ñ–≤"))


def show_wishlist():
    st.title("üìã –°–ø–∏—Å–æ–∫ –±–∞–∂–∞–Ω–æ–≥–æ")

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–Ω–∏–≥–∏ –≤ —Å–ø–∏—Å–æ–∫ –±–∞–∂–∞–Ω–æ–≥–æ
    with st.expander("üìù –î–æ–¥–∞—Ç–∏ –∫–Ω–∏–≥—É –≤ —Å–ø–∏—Å–æ–∫ –±–∞–∂–∞–Ω–æ–≥–æ", expanded=False):
        with st.form(key="add_wishlist_form"):
            st.subheader("–î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–Ω–∏–≥–∏ –≤ —Å–ø–∏—Å–æ–∫ –±–∞–∂–∞–Ω–æ–≥–æ")

            col1, col2 = st.columns(2)
            with col1:
                title = st.text_input("–ù–∞–∑–≤–∞ –∫–Ω–∏–≥–∏", key="wish_title")
            with col2:
                author = st.text_input("–ê–≤—Ç–æ—Ä (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)", key="wish_author")

            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∂–∞–Ω—Ä—ñ–≤
            genres_result = get_genres()
            if genres_result.get("status") == "—É—Å–ø—ñ—Ö":
                genres = genres_result.get("–∂–∞–Ω—Ä–∏", [])
                genre_options = ["–ù–µ –≤–∫–∞–∑–∞–Ω–æ"] + [g["name"] for g in genres]
                genre_id_map = {g["name"]: g["id"] for g in genres}

                selected_genre = st.selectbox("–ñ–∞–Ω—Ä (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)", genre_options, index=0, key="wish_genre")
            else:
                selected_genre = "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
                genre_id_map = {}

            submit = st.form_submit_button("–î–æ–¥–∞—Ç–∏ –≤ —Å–ø–∏—Å–æ–∫ –±–∞–∂–∞–Ω–æ–≥–æ", use_container_width=True)

            if submit:
                if title:
                    with st.spinner("–î–æ–¥–∞–≤–∞–Ω–Ω—è –≤ —Å–ø–∏—Å–æ–∫ –±–∞–∂–∞–Ω–æ–≥–æ..."):
                        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö
                        wishlist_data = {
                            "user_id": st.session_state.user["id"],
                            "title": title,
                            "author": author
                        }

                        if selected_genre != "–ù–µ –≤–∫–∞–∑–∞–Ω–æ":
                            wishlist_data["genre_id"] = genre_id_map.get(selected_genre)

                        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤ —Å–ø–∏—Å–æ–∫ –±–∞–∂–∞–Ω–æ–≥–æ
                        result = add_to_wishlist(wishlist_data)

                        if result.get("status") == "—É—Å–ø—ñ—Ö":
                            if result.get("–∑–Ω–∞–π–¥–µ–Ω—ñ_–∫–Ω–∏–≥–∏"):
                                st.success(
                                    f"–î–æ–¥–∞–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –±–∞–∂–∞–Ω–æ–≥–æ! –ó–Ω–∞–π–¥–µ–Ω–æ {len(result.get('–∑–Ω–∞–π–¥–µ–Ω—ñ_–∫–Ω–∏–≥–∏'))} –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –∫–Ω–∏–≥.")
                            else:
                                st.success("–î–æ–¥–∞–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –±–∞–∂–∞–Ω–æ–≥–æ!")
                            time.sleep(2)
                            st.rerun()
                        else:
                            st.error(result.get("–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≤ —Å–ø–∏—Å–æ–∫ –±–∞–∂–∞–Ω–æ–≥–æ"))
                else:
                    st.error("–ù–∞–∑–≤–∞ –∫–Ω–∏–≥–∏ –æ–±–æ–≤'—è–∑–∫–æ–≤–∞")

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–æ–≥–æ
    result = get_wishlist(st.session_state.user["id"])

    if result.get("status") == "—É—Å–ø—ñ—Ö":
        wishlist = result.get("—Å–ø–∏—Å–æ–∫_–±–∞–∂–∞–Ω–æ–≥–æ", [])

        if not wishlist:
            st.info("–í–∞—à —Å–ø–∏—Å–æ–∫ –±–∞–∂–∞–Ω–æ–≥–æ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
            return

        st.write(f"–£ –≤–∞—à–æ–º—É —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–æ–≥–æ {len(wishlist)} –∫–Ω–∏–≥")

        for item in wishlist:
            col1, col2 = st.columns([4, 1])

            with col1:
                st.markdown(f"""
                <div class="card">
                    <h3>{item['title']}</h3>
                    <p><em>{item.get('author') or '–ê–≤—Ç–æ—Ä –Ω–µ –≤–∫–∞–∑–∞–Ω–∏–π'}</em></p>
                    <p><strong>–ñ–∞–Ω—Ä:</strong> {item.get('genre_name') or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</p>
                    <p><strong>–î–æ–¥–∞–Ω–æ:</strong> {format_date(item.get('created_at'))}</p>
                </div>
                """, unsafe_allow_html=True)

            with col2:
                if st.button("–í–∏–¥–∞–ª–∏—Ç–∏", key=f"delete_wish_{item['id']}"):
                    with st.spinner("–í–∏–¥–∞–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–æ–≥–æ..."):
                        result = delete_from_wishlist(item['id'], st.session_state.user["id"])
                        if result.get("status") == "—É—Å–ø—ñ—Ö":
                            st.success("–í–∏–¥–∞–ª–µ–Ω–æ –∑—ñ —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–æ–≥–æ!")
                            time.sleep(2)
                            st.rerun()
                        else:
                            st.error(result.get("–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑—ñ —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–æ–≥–æ"))

            if "–¥–æ—Å—Ç—É–ø–Ω—ñ_–≤–∞—Ä—ñ–∞–Ω—Ç–∏" in item and item["–¥–æ—Å—Ç—É–ø–Ω—ñ_–≤–∞—Ä—ñ–∞–Ω—Ç–∏"]:
                st.write(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(item['–¥–æ—Å—Ç—É–ø–Ω—ñ_–≤–∞—Ä—ñ–∞–Ω—Ç–∏'])} –∫–Ω–∏–≥, —è–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –∑–∞–ø–∏—Ç—É:")

                for variant in item["–¥–æ—Å—Ç—É–ø–Ω—ñ_–≤–∞—Ä—ñ–∞–Ω—Ç–∏"]:
                    st.markdown(f"""
                    <div class="card" style="margin-left: 30px;">
                        <h4>{variant['title']}</h4>
                        <p><em>{variant['author']}</em></p>
                        <p><strong>–í–ª–∞—Å–Ω–∏–∫:</strong> {variant['owner_name']}</p>
                    </div>
                    """, unsafe_allow_html=True)

                    if st.button("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏", key=f"view_variant_{variant['id']}"):
                        st.session_state.show_book_details = variant['id']
                        st.rerun()
    else:
        st.error(result.get("–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –±–∞–∂–∞–Ω–æ–≥–æ"))


def show_messages():
    st.title("üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")

    chat_list_result = get_user_chats(st.session_state.user["id"])

    if chat_list_result.get("status") != "—É—Å–ø—ñ—Ö":
        st.error(chat_list_result.get("–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤."))
        return

    contacts = [
        {
            "id": contact["other_user_id"],
            "username": contact["username"],
            "unread_messages": contact.get("unread_count", 0)
        }
        for contact in chat_list_result.get("–∫–æ–Ω—Ç–∞–∫—Ç–∏", [])
    ]

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∏–±—Ä–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –≤ —Å–ø–∏—Å–∫—É
    chat_user_id = st.session_state.get("chat_user_id")
    if chat_user_id and all(c["id"] != chat_user_id for c in contacts):
        chat_user_info = get_user_profile(chat_user_id)
        chat_user = chat_user_info.get("–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á")
        if chat_user:
            contacts.append({
                "id": chat_user_id,
                "username": chat_user.get("username"),
                "unread_messages": 0
            })

    # –Ø–∫—â–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞, –≤–∏–±–∏—Ä–∞—î–º–æ –ø–µ—Ä—à–æ–≥–æ –∑—ñ —Å–ø–∏—Å–∫—É
    if not st.session_state.chat_user_id and contacts:
        st.session_state.chat_user_id = contacts[0]["id"]

    col1, col2 = st.columns([1, 3])

    with col1:
        st.subheader("–ö–æ–Ω—Ç–∞–∫—Ç–∏")

        if not contacts:
            st.info("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤.")
            return

        for contact in contacts:
            # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∑ —ñ–º'—è–º —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            button_label = contact['username']
            unread = int(contact['unread_messages'])

            if unread > 0:
                button_label += f" ({unread} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö)"

            # –í–∏–¥—ñ–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É —Å—Ç–∏–ª–µ–º –∫–Ω–æ–ø–∫–∏
            is_active = contact["id"] == st.session_state.chat_user_id
            button_type = "primary" if is_active else "secondary"

            # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏
            if st.button(button_label, key=f"select_contact_{contact['id']}", use_container_width=True):
                st.session_state.chat_user_id = contact["id"]
                st.rerun()

    with col2:
        if st.session_state.chat_user_id:
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            chat_result = get_chat_messages(st.session_state.user["id"], st.session_state.chat_user_id)

            if chat_result.get("status") == "—É—Å–ø—ñ—Ö":
                messages = chat_result.get("–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", [])
                chat_user = chat_result.get("—Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫", {})

                st.subheader(f"–ß–∞—Ç –∑ {chat_user.get('username')}")

                # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                message_container = st.container()

                with message_container:
                    if not messages:
                        st.info("–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ —Ü–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")
                    else:
                        for message in messages:
                            is_user = message["sender_id"] == st.session_state.user["id"]
                            align = "flex-end" if is_user else "flex-start"
                            bg_color = COLORS["primary_light"] if is_user else "#f0f0f0"

                            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–∏–º–≤–æ–ª –∞–≤–∞—Ç–∞—Ä–∫–∏
                            avatar_symbol = message.get("sender_avatar_symbol", "üë§")

                            st.markdown(f"""
                            <div style="display: flex; justify-content: {align}; margin-bottom: 10px;">
                                <div style="display: flex; align-items: center;">
                                    <div style="font-size: 24px; margin-right: 10px;">
                                        {avatar_symbol}
                                    </div>
                                    <div style="background-color: {bg_color}; padding: 10px; border-radius: 10px; max-width: 80%;">
                                        <p style="margin: 0;">{message.get('content')}</p>
                                        <p style="margin: 0; font-size: 0.7rem; text-align: right; color: #777;">
                                            {format_date(message.get('created_at'))}
                                        </p>
                                    </div>
                                </div>
                            </div>
                            """, unsafe_allow_html=True)

                # –§–æ—Ä–º–∞ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                with st.form(key=f"send_message_form"):
                    message = st.text_area("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", key="message_text", placeholder="–ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")

                    submit = st.form_submit_button("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏")

                    if submit and message:
                        with st.spinner("–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è..."):
                            result = send_message(
                                st.session_state.user["id"],
                                st.session_state.chat_user_id,
                                message
                            )

                            if result.get("status") == "—É—Å–ø—ñ—Ö":
                                st.rerun()
                            else:
                                st.error(result.get("–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"))
            else:
                st.error(chat_result.get("–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"))
        else:
            st.info("–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –∑—ñ —Å–ø–∏—Å–∫—É –∑–ª—ñ–≤–∞, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.")


def show_my_profile():
    st.title("üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å")

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ—Ñ—ñ–ª—é
    result = get_user_profile(st.session_state.user["id"])

    if result.get("status") == "—É—Å–ø—ñ—Ö":
        user = result.get("–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á")

        col1, col2 = st.columns([1, 2])

        with col1:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–∏–º–≤–æ–ª –∞–≤–∞—Ç–∞—Ä–∫–∏ –∞–±–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Å–∏–º–≤–æ–ª
            avatar_symbol = user.get("avatar_symbol", "üë§")

            # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Å–∏–º–≤–æ–ª —É –≤–µ–ª–∏–∫–æ–º—É —Ä–æ–∑–º—ñ—Ä—ñ
            st.markdown(f"""
            <div style="font-size: 100px; text-align: center; margin-bottom: 20px;">
                {avatar_symbol}
            </div>
            """, unsafe_allow_html=True)

            st.markdown(f"""
            <div class="card" style="display: block; text-align: center;">
                <h3>{user.get('username')}</h3>
                <p>{display_rating(user.get("rating") or 0)}</p>
                <p>{user.get("rating_count") or 0} –≤—ñ–¥–≥—É–∫—ñ–≤</p>
            </div>
            """, unsafe_allow_html=True)

            # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
            st.markdown(f"""
            <div class="card">
                <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                <p><strong>–ö–Ω–∏–≥ —É –±—ñ–±–ª—ñ–æ—Ç–µ—Ü—ñ:</strong> {user.get("–∫—ñ–ª—å–∫—ñ—Å—Ç—å_–∫–Ω–∏–≥") or 0}</p>
                <p><strong>–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:</strong> {format_date(user.get("created_at"))}</p>
            </div>
            """, unsafe_allow_html=True)

        with col2:
            # –û—Å–æ–±–∏—Å—Ç—ñ –¥–∞–Ω—ñ
            with st.expander("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å", expanded=False):
                with st.form(key="edit_profile_form"):
                    st.subheader("–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é")

                    # –î–æ–¥–∞—î–º–æ –≤–∏–±—ñ—Ä –µ–º–æ–¥–∑—ñ-–∞–≤–∞—Ç–∞—Ä–∫–∏
                    avatars = ["üë®", "üë©", "üßë", "üë¶", "üëß", "üë®‚Äçü¶∞", "üë©‚Äçü¶∞", "üë®‚Äçü¶±", "üë©‚Äçü¶±", "üë®‚Äçü¶≤",
                               "üë©‚Äçü¶≤", "üë®‚Äçü¶≥", "üë©‚Äçü¶≥", "üßî", "üßë‚Äçü¶∞", "üßë‚Äçü¶±", "üßë‚Äçü¶≤", "üßë‚Äçü¶≥"]

                    current_avatar = user.get("avatar_symbol", "üë§")
                    selected_avatar = st.selectbox(
                        "–ê–≤–∞—Ç–∞—Ä–∫–∞",
                        options=avatars,
                        index=avatars.index(current_avatar) if current_avatar in avatars else 0
                    )

                    full_name = st.text_input("–ü–æ–≤–Ω–µ —ñ–º'—è", value=user.get("full_name", ""))

                    col1, col2 = st.columns(2)
                    with col1:
                        phone_number = st.text_input("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", value=user.get("phone_number", ""))
                    with col2:
                        region = st.text_input("–†–µ–≥—ñ–æ–Ω", value=user.get("region", ""))

                    new_password = st.text_input("–ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å", type="password")
                    confirm_password = st.text_input("–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å", type="password")

                    submit = st.form_submit_button("–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏", use_container_width=True)

                    if submit:
                        if new_password != confirm_password:
                            st.error("–ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å")
                        else:
                            with st.spinner("–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é..."):
                                # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö
                                profile_data = {
                                    "full_name": full_name,
                                    "phone_number": phone_number,
                                    "region": region,
                                    "avatar_symbol": selected_avatar,
                                    "password": new_password
                                }

                                # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
                                result = update_user_profile(st.session_state.user["id"], profile_data)

                                if result.get("status") == "—É—Å–ø—ñ—Ö":
                                    st.success("–ü—Ä–æ—Ñ—ñ–ª—å —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!")
                                    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Å–µ—Å—ñ—ó
                                    st.session_state.user["full_name"] = full_name
                                    st.session_state.user["phone_number"] = phone_number
                                    st.session_state.user["region"] = region
                                    st.session_state.user["avatar_symbol"] = selected_avatar
                                    st.session_state.user["password"] = new_password
                                    time.sleep(2)
                                    st.rerun()
                                else:
                                    st.error(result.get("–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é"))

            # –í—ñ–¥–≥—É–∫–∏ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            st.subheader("–í—ñ–¥–≥—É–∫–∏ –ø—Ä–æ –º–µ–Ω–µ")

            reviews = user.get("–≤—ñ–¥–≥—É–∫–∏", [])

            with st.expander(f"–í—ñ–¥–≥—É–∫–∏ ({len(reviews)})", expanded=False):
                if reviews:
                    for review in reviews:
                        st.markdown(f"""
                        <div class="card">
                            <p><strong>{review.get('username')}</strong> ‚Ä¢ {format_date(review.get('created_at'))}</p>
                            <p>{display_rating(review.get('rating') or 0)}</p>
                            <p>{review.get('comment') or "–ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è"}</p>
                        </div>
                        """, unsafe_allow_html=True)
                else:
                    st.info("–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –≤—ñ–¥–≥—É–∫—ñ–≤ –≤—ñ–¥ —ñ–Ω—à–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
    else:
        st.error(result.get("–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é"))


def show_user_profile(user_id):
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ—Ñ—ñ–ª—é
    result = get_user_profile(user_id)

    if result.get("status") != "—É—Å–ø—ñ—Ö":
        st.error(result.get("–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é"))
        st.button("‚Üê –ù–∞–∑–∞–¥", on_click=reset_details)
        return

    user = result.get("–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á")

    # –í–µ—Ä—Ö–Ω—è –ø–∞–Ω–µ–ª—å –∑ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—î—é
    col1, col2 = st.columns([1, 4])
    with col1:
        st.button("‚Üê –ù–∞–∑–∞–¥", on_click=reset_details)
    with col2:
        st.title(f"–ü—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")

    st.markdown("---")

    col1, col2 = st.columns([1, 2])

    with col1:
        avatar_symbol = user.get("avatar_symbol", "üë§")

        # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Å–∏–º–≤–æ–ª —É –≤–µ–ª–∏–∫–æ–º—É —Ä–æ–∑–º—ñ—Ä—ñ
        st.markdown(f"""
                    <div style="font-size: 100px; text-align: center; margin-bottom: 20px;">
                        {avatar_symbol}
                    </div>
                    """, unsafe_allow_html=True)

        st.markdown(f"""
        <div class="card" style="display: block; text-align: center;">
            <h3>{user.get('username')}</h3>
            <p>{display_rating(user.get("rating") or 0)}</p>
            <p>{user.get("rating_count") or 0} –≤—ñ–¥–≥—É–∫—ñ–≤</p>
        </div>
        """, unsafe_allow_html=True)

        # –ö–Ω–æ–ø–∫–∏ –¥—ñ–π
        if st.button("–ù–∞–ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", use_container_width=True):
            st.session_state.chat_user_id = user["id"]
            st.session_state.active_tab = "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
            st.session_state.show_user_profile = None
            st.rerun()

        # –ü–æ—à—É–∫ –∫–Ω–∏–≥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if st.button("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–Ω–∏–≥–∏", use_container_width=True):
            st.session_state.book_filter = {"owner_id": user["id"]}
            st.session_state.active_tab = "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–Ω–∏–≥–∏"
            st.session_state.show_user_profile = None
            st.rerun()

    with col2:
        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        st.markdown(f"""
                <div class="card">
                    <h3>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</h3>
                    <p><strong>–ü–æ–≤–Ω–µ —ñ–º'—è:</strong> {user.get("full_name") or "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}</p>
                    <p><strong>–†–µ–≥—ñ–æ–Ω:</strong> {user.get("region") or "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}</p>
                    <p><strong>–ö–Ω–∏–≥ —É –±—ñ–±–ª—ñ–æ—Ç–µ—Ü—ñ:</strong> {user.get("–∫—ñ–ª—å–∫—ñ—Å—Ç—å_–∫–Ω–∏–≥") or 0}</p>
                    <p><strong>–ù–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ñ –∑:</strong> {format_date(user.get("created_at"))}</p>
                </div>
                """, unsafe_allow_html=True)
        # –í—ñ–¥–≥—É–∫–∏ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        st.subheader("–í—ñ–¥–≥—É–∫–∏ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")

        reviews = user.get("–≤—ñ–¥–≥—É–∫–∏", [])

        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É
        with st.expander("–î–æ–¥–∞—Ç–∏ –≤—ñ–¥–≥—É–∫", expanded=False):
            with st.form(key=f"add_user_review_form"):
                rating = st.slider("–û—Ü—ñ–Ω–∫–∞", min_value=1, max_value=5, value=5)
                comment = st.text_area("–ö–æ–º–µ–Ω—Ç–∞—Ä", placeholder="–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤—ñ–π –≤—ñ–¥–≥—É–∫ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
                submit = st.form_submit_button("–î–æ–¥–∞—Ç–∏ –≤—ñ–¥–≥—É–∫", use_container_width=True)

                if submit:
                    with st.spinner("–î–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É..."):
                        result = add_user_review(
                            user["id"],
                            st.session_state.user["id"],
                            rating,
                            comment
                        )

                        if result.get("status") == "—É—Å–ø—ñ—Ö":
                            st.success("–í—ñ–¥–≥—É–∫ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")
                            time.sleep(2)
                            st.rerun()
                        else:
                            st.error(result.get("–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≤—ñ–¥–≥—É–∫—É"))

        with st.expander(f"–í—ñ–¥–≥—É–∫–∏ ({len(reviews)})", expanded=False):
            if reviews:
                for review in reviews:
                    st.markdown(f"""
                    <div class="card">
                        <p><strong>{review.get('username')}</strong> ‚Ä¢ {format_date(review.get('created_at'))}</p>
                        <p>{display_rating(review.get('rating') or 0)}</p>
                        <p>{review.get('comment') or "–ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è"}</p>
                    </div>
                    """, unsafe_allow_html=True)
            else:
                st.info("–£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —â–µ –Ω–µ–º–∞—î –≤—ñ–¥–≥—É–∫—ñ–≤.")


def show_user_search():
    st.title("üîç –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")

    # –§–æ—Ä–º–∞ –ø–æ—à—É–∫—É
    col1, col2, col3 = st.columns([2, 2, 1])

    with col1:
        query = st.text_input("–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –ø–æ–≤–Ω–µ —ñ–º'—è", st.session_state.search_params.get('query', ''))

    with col2:
        region = st.text_input("–†–µ–≥—ñ–æ–Ω", st.session_state.search_params.get('region', ''))

    with col3:
        st.write(" ")  # –ü—Ä–æ–º—ñ–∂–æ–∫ –¥–ª—è –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è
        search_button = st.button("–ü–æ—à—É–∫", use_container_width=True)

    if search_button:
        if not query and not region:
            st.warning("–í–∫–∞–∂—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ—à—É–∫—É.")
        else:
            st.session_state.search_params = {'query': query, 'region': region}
            st.rerun()

    # –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É
    if 'search_params' in st.session_state and (
            st.session_state.search_params.get('query') or st.session_state.search_params.get('region')):
        with st.spinner("–ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤..."):
            result = search_users(
                st.session_state.search_params.get('query'),
                st.session_state.search_params.get('region')
            )

            if result.get("status") == "—É—Å–ø—ñ—Ö":
                users = result.get("–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", [])

                if users:
                    st.subheader(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(users)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")

                    # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
                    cols = st.columns(3)

                    for i, user in enumerate(users):
                        with cols[i % 3]:
                            st.markdown(f"""
                            <div class="user-card" style="display: block;">
                                <h3>{user.get('username')}</h3>
                                <p>{user.get('full_name') or '–Ü–º—è –Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}</p>
                                <p><strong>–†–µ–≥—ñ–æ–Ω:</strong> {user.get('region') or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</p>
                                <p>{display_rating(user.get('rating') or 0)}</p>
                                <p>üìö {user.get('–∫—ñ–ª—å–∫—ñ—Å—Ç—å_–∫–Ω–∏–≥') or 0} –∫–Ω–∏–≥ ‚Ä¢ ‚≠ê {user.get('–∫—ñ–ª—å–∫—ñ—Å—Ç—å_–≤—ñ–¥–≥—É–∫—ñ–≤') or 0} –≤—ñ–¥–≥—É–∫—ñ–≤</p>
                            </div>
                            """, unsafe_allow_html=True)

                            if st.button("–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é", key=f"user_profile_{user['id']}"):
                                st.session_state.show_user_profile = user["id"]
                                st.rerun()
                else:
                    st.info("–ó–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
            else:
                st.error(result.get("–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"))


def show_statistics_page():
    st.title("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏")

    with st.spinner("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏..."):
        result = get_statistics()

        if result.get("status") == "—É—Å–ø—ñ—Ö":
            stats = result.get("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", {})

            # –û—Å–Ω–æ–≤–Ω—ñ —Ü–∏—Ñ—Ä–∏
            col1, col2, col3 = st.columns(3, border=True)

            with col1:
                st.metric("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", stats.get("–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", 0))

            with col2:
                st.metric("–í—Å—å–æ–≥–æ –∫–Ω–∏–≥", stats.get("–∫–Ω–∏–≥_–≤—Å—å–æ–≥–æ", 0))

            with col3:
                st.metric("–î–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–Ω–∏–≥", stats.get("–∫–Ω–∏–≥_–¥–æ—Å—Ç—É–ø–Ω–æ", 0))

            st.markdown("---")

            # –û–±–º—ñ–Ω–∏
            st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–º—ñ–Ω—ñ–≤")

            col1, col2 = st.columns(2)

            with col1:
                st.markdown(f"""
                <div class="card" style="text-align: center;">
                    <h5>–í—Å—å–æ–≥–æ –æ–±–º—ñ–Ω—ñ–≤</h5>
                    <p style="font-size: 1.5rem; font-weight: 600;">{stats.get("–æ–±–º—ñ–Ω—ñ–≤_–≤—Å—å–æ–≥–æ", 0)}</p>
                </div>
                """, unsafe_allow_html=True)

            with col2:
                st.markdown(f"""
                <div class="card" style="text-align: center;">
                    <h5>–£—Å–ø—ñ—à–Ω–∏—Ö –æ–±–º—ñ–Ω—ñ–≤</h5>
                    <p style="font-size: 1.5rem; font-weight: 600;">{stats.get("–æ–±–º—ñ–Ω—ñ–≤_—É—Å–ø—ñ—à–Ω–∏—Ö", 0)}</p>
                </div>
                """, unsafe_allow_html=True)

            st.markdown("---")

            # –ü–æ–ø—É–ª—è—Ä–Ω—ñ –∂–∞–Ω—Ä–∏ —ñ –Ω–æ–≤—ñ –∫–Ω–∏–≥–∏
            col1, col2 = st.columns(2)

            with col1:
                st.subheader("–ü–æ–ø—É–ª—è—Ä–Ω—ñ –∂–∞–Ω—Ä–∏")

                popular_genres = stats.get("–ø–æ–ø—É–ª—è—Ä–Ω—ñ_–∂–∞–Ω—Ä–∏", [])

                with st.expander("–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ñ –∂–∞–Ω—Ä–∏", expanded=False):
                    if popular_genres:
                        for genre in popular_genres:
                            st.markdown(f"""
                            <div class="card">
                                <div style="display: flex; justify-content: space-between;">
                                    <p>{genre.get('name')}</p>
                                    <p><strong>{genre.get('count')} –∫–Ω–∏–≥</strong></p>
                                </div>
                            </div>
                            """, unsafe_allow_html=True)
                    else:
                        st.info("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–ø—É–ª—è—Ä–Ω—ñ –∂–∞–Ω—Ä–∏.")

            with col2:
                st.subheader("–ù–æ–≤—ñ –∫–Ω–∏–≥–∏")

                newest_books = stats.get("–Ω–æ–≤—ñ_–∫–Ω–∏–≥–∏", [])

                with st.expander("–ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–æ–≤—ñ –∫–Ω–∏–≥–∏", expanded=False):
                    if newest_books:
                        for book in newest_books:
                            st.markdown(f"""
                            <div class="card">
                                <h4>{book.get('title')}</h4>
                                <p>{book.get('author')}</p>
                                <p><small>–î–æ–¥–∞–Ω–æ: {format_date(book.get('created_at'))}</small></p>
                                <p><small>–í–ª–∞—Å–Ω–∏–∫: {book.get('owner_name')}</small></p>
                            </div>
                            """, unsafe_allow_html=True)

                            if st.button("–î–µ—Ç–∞–ª—ñ", key=f"stats_book_{book['id']}"):
                                st.session_state.show_book_details = book["id"]
                                st.rerun()
                    else:
                        st.info("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –Ω–æ–≤—ñ –∫–Ω–∏–≥–∏.")

            st.markdown("---")

            # –ù–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
            st.subheader("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑ –Ω–∞–π–±—ñ–ª—å—à–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∫–Ω–∏–≥")

            active_users = stats.get("–∞–∫—Ç–∏–≤–Ω—ñ_–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", [])

            if active_users:
                cols = st.columns(3)

                for i, user in enumerate(active_users):
                    with cols[i % 3]:
                        st.markdown(f"""
                        <div class="card" style="display: block; text-align: center;">
                            <h6>{user.get('username')}</h6>
                            <p>{user.get('book_count')} –∫–Ω–∏–≥</p>
                        </div>
                        """, unsafe_allow_html=True)

                        if user['id'] != st.session_state.user['id']:
                            if st.button("–ü—Ä–æ—Ñ—ñ–ª—å", key=f"stats_user_{user['id']}"):
                                st.session_state.show_user_profile = user["id"]
                                st.rerun()
            else:
                st.info("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
        else:
            st.error(result.get("–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"))


# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –¥–æ–¥–∞—Ç–∫—É
def main():
    # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
    if st.session_state.page == 'login':
        show_login_page()
    elif st.session_state.page == 'main':
        show_main_page()

if __name__ == "__main__":
    main()